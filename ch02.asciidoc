== Bootstrap CSS

At the core of Bootstrap is a set of basic HTML elements that have been styled to allow for easy enhancement via classes and user styles.

// tidied up some of the phrasing throughout this chap. -NM

//I'm thinking for this chapter I'd love to see like a series of image slideshows for each section, showing the rendered html, the source html, and the CSS for whatever is being discussed. I envision these floating out into the margin of the chimera page a bit, and running alongside the text. I need to come up with a way to tag these in Atlas etc, but it seems very doable to me. We could also have them render in the other formats, as well (epub, mobi, print), but just display each image linearly. Thoughts? -NM

=== Typography

Starting with typography, Bootstrap uses Helvetica Neue, Helvetica, Arial, and sans-serif in its default font stack. These are all standard fonts and are included as defaults on all major computers. If by chance these fonts don't exist, they fall back to `sans-serif` (the catchall) to tell the browser to use the default font for the browser. All body copy has the `font-size` set at 14 pixels, with the `line-height` set at 20 pixels. The `<p>` tag has a `margin-bottom` of 10 pixels, or half the `line-height`.

//RE: the base font families, maybe just add a few words or a sentence about how these are just standard web/system fonts, and not special font files that live in bootstrap or anything...unless they are... -NM
// Good point, added another line. -JS

==== Headings

All six standard heading levels have been styled in Bootstrap, with the `<h1>` at 36 pixels tall, and the `<h6>` down to 12 pixels (for reference, default body text is 14 pixels tall). See <<figure2-1>>. In addition, to add an inline subheading to any of the headings, simply add `<small>` around any of the elements and you will get smaller text in a lighter color.
In the case of the `<h1>`, the small text is 24 pixels tall, normal font weight (i.e., not bold), and gray instead of black.

[[figure2-1]]
.Headings
image::images/boot_0201.png[]

// Bit weird to call this "adding emphasis"--I usually think of emphasis as bolder or italic or bigger, but not smaller and lighter. Is there another way to describe this effect? -NM
// I'm now calling it an inline sub-heading. -JS

// Added a place holder above for body text font size, to give the heading sizes a frame of reference. Also tweaked the last sentence to make it a little clearer. -NM

[source, css]
----------
h1 small {
	font-size:24px;
	font-weight:normal;
	line-height:1;
	color:#999;
	}
----------

// Should all the sections that follow this comment actually be level 4 headings, not level 5? -NM
// Not sure I follow here... -JS

==== Lead Body Copy

To add some emphasis to a paragraph, add `class="lead"` (see <<figure2-2>>). This will give you larger font size, lighter weight, and a taller line height. This is generally used for the first few paragraphs in a section, but it can really be used anywhere:

// Added a sentence about historic usage of ledes above. -NM


[source, html]
----------
<p class="lead">Bacon ipsum dolor sit amet tri-tip pork loin ball tip frankfurter
swine boudin meatloaf shoulder short ribs cow drumstick beef jowl.
Meatball chicken sausage tail, kielbasa strip steak turducken venison prosciutto.
Chuck filet mignon tri-tip ribeye, flank brisket leberkas. Swine
turducken turkey shank, hamburger beef ribs bresaola pastrami venison
rump.</p>
----------

[[figure2-2]]
.Lead body copy classes
image::images/boot_0202.png[]


==== Emphasis

In addition to using the `<small>` tag within headings, as discussed above, you can also use it with body copy. When `<small>` is applied to body text, the font shrinks to 85% of its original size.

==== Bold

To add emphasis to text, simply wrap it in a `<strong>` tag. This will add `font-weight:bold;` to the selected text.

==== Italics

For italics, wrap your content in the `<em>` tag. The term "em" derives from the word "emphasis", and is meant to add stress to your text.

.Heads Up!
NOTE: You might be thinking to yourself, why not just use the `<b>` or `<i>` tags instead of `<em>` or `<strong>`. In HTML5, `<b>` is meant to highlight words or phrases without conveying additional importance--for example, key terms or names--while `<i>` is mostly for voice, technical terms, internal dialogue, etc. For more information about the semantic changes to `<b>` and `<i>`, check out http://www.w3.org/International/questions/qa-b-and-i-tags[W3.org's article].

// I added some stuff to this note. -NM

==== Emphasis classes

Along with `<strong>` and `<em>`, Boootstrap offers a few other classes that can be used to provide emphasis. These could be applied to paragraphs, or spans.

// Do these classes have to be applied at the paragraph level, or can they be applied to spans as well? -NM

.Emphasis Classes
[source, html]
--------
<p class="muted">This content is muted</p>
<p class="text-warning">This content carries a warning class</p>
<p class="text-error">This content carries an error class</p>
<p class="text-info">This content carries an info class</p>
<p class="text-success">This content carries a success class</p>
<p>This content has <em>emphasis</em>, and can be <strong>bold</strong></p>
--------

.Emphasis Classes
image::images/boot_0203.png[]

===== Abbreviations

The HTML `<abbr>` element provides markup for abbreviations or acronyms, like WWW or HTTP. By marking up abbreviations, you can give useful information to browsers, spell checkers, translation systems or search engines. Bootstrap styles `<abbr>` elements with a light dotted border along the bottom, and reveals the full text on hover (as long as you add that text to the `<abbr>` title attribute).


.Abbreviation Example
[source, html]
--------
<abbr title="Real Simple Syndication">RSS</abbr>
--------

.Abbreviation Example
image::images/boot_0204.png[]

Add `.initialism` to an `<abbr>` for a slightly smaller font size.

.Abbreviation Example
[source, html]
--------
<abbr title="Real Simple Syndication">RSS</abbr>
--------

.Abbreviation Example
image::images/boot_0205.png[]


===== Addresses

Adding `<address>` elements to your page can help screen readers and search engines locate any physical addresses and phone numbers in the text. It can also be used to mark up email addresses. Since the `<address>` defaults to `display:block;` you'll need to use `<br>` tags to add line breaks to the enclosed address text (for example, to split the street address and city onto separate lines).

// I added the / to the br tags here to make it valid xhtml, but you can ditch them if you dont want them there. Also added a little extra to the end of the paragraph. -NM
// I'm going to stick with the <br>. I normally write them the other way, but to stick to the spec, it would be this way.
// http://www.w3.org/html/wg/drafts/html/master/text-level-semantics.html#the-br-element

.Address markup
[source, html]
--------
<address>
  <strong>O'Reilly Media, Inc.</strong><br>
  1005 Gravenstein HWY North<br>
  Sebastopol, CA 95472<br>
  <abbr title="Phone">P:</abbr> <a href="tel:+17078277000">(707) 827-7000</a>
</address>

<address>
  <strong>Jake Spurlock</strong><br>
  <a href="mailto:#">flast@oreilly.com</a>
</address>
--------

.Address tag
image::images/boot_0206.png[]


===== Blockquotes

To add blocks of quoted text to your document--or for any quotation that you want to set apart from the main text flow--add the `<blockquote>` tag around the text. For best results, and for line breaks, wrap each subsection in a `<p>` tag. Bootstrap's default styling indents the text, and adds a thick grey border along the left side. To identify the source of the quote, add the `<small>` tag, add the source's name wrapped in a `<cite>` tag. When you put it all together, you get something that looks like Figure 2-7:

// Do they have to use the small tag for the source, or is that just a stylistic suggestion? -NM
// It is a stylistic suggestion. There is some CSS that supports it. -JS

.Basic blockquote
image::images/boot_0207.png[]

.Blockquote Markup
[source, html]
--------
<blockquote>
	<p>That this is needed, desperately needed, is indicated by the incredible uptake of Bootstrap. I use it in all the server software I'm working on. And it shows through in the templating language I'm developing, so everyone who uses it will find it's "just there" and works, any time you want to do a Bootstrap technique. Nothing to do, no libraries to include. It's as if it were part of the hardware. Same approach that Apple took with the Mac OS in 1984.</p>
	<small>Developer of RSS, <cite title="Source Title">Dave Winer</cite></small>
</blockquote>
--------

.Heads Up!
NOTE: If you want a `<blockquote>` with content that is right aligned, add `.pull-right` to the tag. In addition to the right-aligned text, the entire `blockquote` is floated to the right. This creates nice pull-quotes in your content.


.Pull right blockquote
image::images/boot_0208.png[]

==== Lists

Bootstrap offers support and styling for the three main list types that HTML offers: ordered, unordered, and definition lists. An unordered list is a list that doesn't have any particular order, and is traditionally styled with bullets.

===== Unordered List

.Unordered List Markup
[source, html]
--------

<h3>Favorite Outdoor Actvities</h3>
<ul>
	<li>Backpacking in Yosemite</li>
	<li>Hiking in Arches
		<ul>
			<li>Delicate Arch</li>
			<li>Park Avenue</li>
		</ul>
	</li>
	<li>Biking the Flintstones Trail</li>
</ul>

--------

.Unordered List Example
image::images/outdoor.png[]

If you have an ordered list that you would like to remove the bullets from,  add `class="unstyled"` to the opening `<ul>` tag.

[NOTE]
=====================================================================
Personally, I hold a strong aversion to using the `<br>` tag, and when I want a single spaced line break, I place each line in an unstyled unordered list. As an example, you might want a condensed address box, like the illustration above in Figure 2-6, you could have each line as a `<li>`. In my mind, this is the more semantic way to markup the text.
=====================================================================

// it seemed like this para belonged in the unordered list section, so i moved it. I also split it, since it seemed like there were two different thoughts there. Also it seems like you're still working out the second thought (which I tagged as a note, because it felt like it was going to be a note to me, but feel free to change). -NM

// Thanks. -JS

===== Ordered List

An ordered list is a list that falls in some sort of sequential order, and is prefaced by numbers rather then bullets. This is handy when you want to build a list of numbered items, like a task list, guide items, or even a list of comments on a blog post.

.Ordered List Markup
[source, html]
--------

<h3>Self-Referential Task List</h3>
<ol>
	<li>Turn off the internet.
	<li>Write the book</li>
	<li>... Profit?</li>
</ol>

--------

.Ordered list example
image::images/boot_0210.png[]

===== Definition List

The third type of list you get with Bootstrap is the definition list. The definition list differs from the ordered and unordered list in that instead of just having a block level `<li>` element, each list item can consist of both the `<dt>` and the `<dd>` elements. `<dt>` stands for "definition term," and like a dictionary, this is the term (or phrase) that is being defined. Subsequently, the `<dd>` is the definition of the `<dt>`.

A lot of times in markup, you will see people using headings inside an unordered list. This works, but maybe isn't the most semantic way to markup the text. A better idea would be to create a `<dl>` and then style the `<dt>` and `<dd>` as you would the heading and the text. That being said, out of the box, Bootstrap offers some clean default styles, and an option for a side-by-side layout of each definition.

// A little unclear on the above paragraph: people use ul's instead of dl's? And the heading is inside the ul? wha? -NM
// Changed the first sentence in the second paragraph. Make a little more sense? -JS

.Definition List Markup
[source, html]
--------
<h3>Common Electronics Parts</h3>
<dl>
	<dt>LED</dt>
	<dd>A light-emitting diode (LED) is a semiconductor light source.</dd>
	<dt>Servo</dt>
	<dd>Servos are small, cheap, mass-produced actuators used for radio control and small robotics.</dd>
</dl>
--------

.Definition List Example
image::images/boot_0211.png[]

To change the `<dl>` to a horizontal layout, with the `<dt>` on the left side, and the `<dd>` on the right, simply add `class="dl-horizontal"` to the opening tag.

.Horizontal Definition List Example
image::images/boot_0212.png[]

.Heads Up!
NOTE: Horizontal description lists will truncate terms that are too long to fit in the left column with `text-overflow`. Additionally, in narrower viewports, they will automatically change to the default stacked layout.

=== Code

There are two different key ways to display code with Bootstrap. The first is the `<code>` tag, and the second is with the `<pre>` tag. Generally, if you are going to be displaying code inline, then you should use the `<code>` tag, but if it needs to be displayed as a standalone block element, or if it has multiple lines, then you should use the `<pre>` tag.

[source, html]
--------
<p>Instead of always using divs, in HTML5, you can use new elements like <code>&lt;section&gt;</code>, <code>&lt;header&gt;</code>, and <code>&lt;footer&gt;</code>. The html should look something like this:</p>
<pre>
  &lt;article&gt;
    &lt;h1&gt;Article Heading&lt;/h1&gt;
  &lt;/article&gt;
</pre>
--------

.Heads Up!
NOTE: Make sure that when you use the `<pre>` and `<code>` tags, you use the unicode variants for the opening and closing tags. `&lt;` and `&gt;`

// Hm I don't think I use the unicode codes for tags inside my code blocks. Is this necessary? What does it do? -NM
// If you don't use the unicode, the browser will try to use them as normal HTML variants. -JS


=== Tables

One of my favorite parts of Bootstrap is the nice way that tables are handled. I do a lot of work looking at and building tables, and the clean layout is great feature that's included in Bootstrap right off the bat. Bootstrap supports the following elements:

.Table elements supported by Bootstrap
[frame="topbot",options="header"]
|======================
|Tag           |Description
|`<table>`     |Wrapping element for displaying data in a tabular format
|`<thead>`     |Container element for table header rows (`<tr>`) to label table columns
|`<tbody>`     |Container element for table rows (`<tr>`) in the body of the table
|`<tr>`        |Container element for a set of table cells (`<td>` or `<th>`) that appears on a single row
|`<td>`        |Default table cell
|`<th>`        |Special table cell for column (or row, depending on scope and placement) labels. Must be used within a `<thead>`
|`<caption>`   |Description or summary of what the table holds, especially useful for screen readers
|======================


If you want a nice basic table style with just some light padding and  horizontal dividers only, add the base class of `.table` to any table. The basic layout has a top border on all of the `<td>` elements.

.Basic Table Class
image::images/boot_0213.png[]

.Table Base Class Example
[source, html]
--------
<table class="table">
  <caption>...</caption>
  <thead>
    <tr>
      <th>...</th>
      <th>...</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>...</td>
      <td>...</td>
    </tr>
  </tbody>
</table>
--------

==== Optional Table Classes

With the base table markup, and adding the `.table` class, there are few additional clases that you can add to style the markup. There are four classes, `.table-striped`, `.table-bordered`, `.table-hover`, and `.table-condensed`.

===== Striped Table

By adding the `.table-striped` class, you will get stripes on rows within the `<tbody>`. This is done via the CSS `:nth-child` selector which is not available on Internet Explorer 7-8.

.Striped Table Class
image::images/boot_0214.png[]

===== Bordered Table

If you add the `.table-bordered` class, you will get borders surrounding every element, and rounded corners around the entire table.

.Bordered Table Class
image::images/boot_0215.png[]

===== Hover Table

If you add the `.table-hover` class, when you hover over a row, a light grey background will be added to rows while the user hovers over them.

.Hover Table Class
image::images/boot_0216.png[]

===== Condensed Table

If you add the `.table-condensed` class, padding is cut in half on rows to condense the table. Useful if you want denser information.

.Condensed Table Class
image::images/boot_0217.png[]


==== Table Row Classes

The classes shown in Table 2-2 will allow you to change the background color of your rows.

.Optional Table Row Classes
[frame="topbot",options="header"]
|======================
|Class         |Description 											|Background color
|`.success`    |Indicates a successful or positive action.				|Green
|`.error`      |Indicates a dangerous or potentially negative action.	|Red
|`.warning`    |Indicates a warning that might need attention.			|Yellow
|`.info`       |Used as an alternative to the default styles.			|Blue
|======================

.Table Row Classes Example
image::images/boot_0218.png[]

=== Forms

Another one of the highlights of using Bootstrap is the attention that is paid to forms. As a web developer, one of my least favorite things to do is style forms. Bootstrap makes it easy to do with the simple HTML markup and extended classes for different styles of forms.

The basic form structure comes styled in Bootstrap, without needing to add any extra helper classes. If you use the placeholder, it is only supported in newer browsers. In older ones, no text will be displayed.


.Basic Form
image::images/boot_0219.png[]

.Basic Form Structure
[source, html]
----
<form>
	<fieldset>
		<legend>Legend</legend>
			<label for="name">Label name</label>
			<input type="text" id="name" placeholder="Type something…">
			<span class="help-block">Example block-level help text here.</span>
			<label class="checkbox" for="checkbox">
				<input type="checkbox" id="checkbox"> Check me out
			</label>
		<button type="submit" class="btn">Submit</button>
	</fieldset>
</form>
----

==== Optional Form Layouts

With a few helper classes, you can dynamically update the layout of your form. Bootstrap comes with a few preset styles you can use.

===== Search Form

Add `.form-search` to the `form` tag, and then `.search-query` to the `<input>` for an input box with rounded corners, and an inline submit button.

.Basic Form Structure
[source, html]
----
<form class="form-search">
  <input type="text" class="input-medium search-query">
  <button type="submit" class="btn">Search</button>
</form>
----

.Search Form
image::images/boot_0220.png[]

===== Inline Form

To create a form where all of the elements are inline, and labels are along side, add the class `.form-inline` to the `<form>` tag. To have the label and the input on the same line, use the inline form below.

// So, does this make just each input and its label inline, or are all the form elements in one long line? -NM
// All of the labels and inputs are in one line. I thine the screenshot shows the difference between this and the horizontal.


.Inline Form Code
[source, html]
----
<form class="form-inline">
	<input type="text" class="input-small" placeholder="Email">
	<input type="password" class="input-small" placeholder="Password">
	<label class="checkbox">
		<input type="checkbox"> Remember me
	</label>
	<button type="submit" class="btn">Sign in</button>
</form>
----

.Inline Form Example
image::images/boot_0221.png[]

===== Horizontal Form

Bootstrap also comes with a pre-baked horizontal form; this one stands apart from the others not only in the amount of markup, but also in the presentation of the form. Traditionally you'd use a table to get a form layout like this, but Bootstrap manages to do it without. Even better, if you're using the responsive CSS, the horizontal form will automatically adapt to smaller layouts by stacking the controls vertically.

To create a form that uses the horizontal layout, do the following:

* Add a class of `form-horizontal` to the parent `<form>` element
* Wrap labels and controls in a `<div>` with class `control-group`
* Add a class of `control-label` to the labels
* Wrap any associated controls in a `<div>` with class `controls` for proper alignment

.Horizontal Form Example
image::images/boot_0222.png[]

.Horizontal Form Code
[source, html]
----
<form class="form-horizontal">
  <div class="control-group">
    <label class="control-label" for="inputEmail">Email</label>
    <div class="controls">
      <input type="text" id="inputEmail" placeholder="Email">
    </div>
  </div>
  <div class="control-group">
    <label class="control-label" for="inputPassword">Password</label>
    <div class="controls">
      <input type="password" id="inputPassword" placeholder="Password">
    </div>
  </div>
  <div class="control-group">
    <div class="controls">
      <label class="checkbox">
        <input type="checkbox"> Remember me
      </label>
      <button type="submit" class="btn">Sign in</button>
    </div>
  </div>
</form>
----

==== Supported Form Controls

Bootstrap natively supports the most common form controls. Chief among them, `input`, `textarea`, `checkbox` and `radio`, and `select`.

===== Inputs

The most common form text field is the input--this is where users will enter most of the essential form data. Bootstrap offers support for all native HTML5 input types: text, password, datetime, datetime-local, date, month, time, week, number, email, URL, search, tel, and color.

.Input Example
image::images/boot_0223.png[]

.Input Code
[source, html]
----
<input type="text" placeholder="Text input">
----

.Heads Up!
NOTE: Both `input` and `textarea` default to a nice blue glow when in the `:active` state.

image::images/boot_02in01.png[]


===== Textarea

The `textarea` is used when you need multiple lines of input. You'll find you mainly modify the `rows` attribute, changing it to the number of rows that you need to support (fewer rows = smaller box, more rows = bigger box).

.Both the `:active`, and the default `textarea`
image::images/boot_0224.png[]

.Textarea Example
[source,html]
----
<textarea rows="3"></textarea>
----

===== Checkboxes and radios

Checkboxes and radio buttons are great for when you want users to be able to choose from a list of preset options. When building a form, use `checkbox` if you want the user to select any number of options from a list, and `radio` if you want to limit them to just one selection.

.Radio and Checkbox example
image::images/boot_0225.png[]

.Radio and Checkbox Code Example
[source,html]
----
<label class="checkbox">
  <input type="checkbox" value="">
  Option one is this and that—be sure to include why it's great
</label>

<label class="radio">
  <input type="radio" name="optionsRadios" id="optionsRadios1" value="option1" checked>
  Option one is this and that—be sure to include why it's great
</label>
<label class="radio">
  <input type="radio" name="optionsRadios" id="optionsRadios2" value="option2">
  Option two can be something else and selecting it will deselect option one
</label>
----

.Inline Checkboxes
image::images/inline.png[]

If you want multiple checkboxes to appear on the same line together, simply add the `.inline` class to a series of checkboxes or radios.

.Inline checkboxes code example
[source,html]
----
<label for="option1" class="checkbox inline">
  <input id="option1" type="checkbox" id="inlineCheckbox1" value="option1"> 1
</label>
<label for="option2" class="checkbox inline">
  <input id="option2" type="checkbox" id="inlineCheckbox2" value="option2"> 2
</label>
<label for="option3" class="checkbox inline">
  <input id="option3" type="checkbox" id="inlineCheckbox3" value="option3"> 3
</label>
----

===== Selects

A select is used when you want to allow the user to pick from multiple options, but by default it only allows one. It’s best to use `<select>` for list options of which the user is familiar such as states or numbers. Use `multiple="multiple"` to allow the user to select more then one option. If you only want the user to choose one option, use `type="radio"`.

// Wait...how is this different from radios? -NM
// Added another line.

.Select Example
image::images/boot_0227.png[]

.Select Code Example
[source,html]
----
<select>
  <option>1</option>
  <option>2</option>
  <option>3</option>
  <option>4</option>
  <option>5</option>
</select>

<select multiple="multiple">
  <option>1</option>
  <option>2</option>
  <option>3</option>
  <option>4</option>
  <option>5</option>
</select>
----

==== Extending Form Controls

In addition to the basic form controls listed in the previous section, Bootstrap offers a few other form components to complement the standard HTML form elements; for example, it lets you easily prepend and append content to inputs.

===== Prepended and Appended Inputs

By adding prepended and appended content to an input field, you can add common elements to the text users input, like the dollar symbol, the `@` for a Twitter username or anything else that might be common for your application interface. To add extra content before the user input, wrap the prepended input in a `<div>` with class `.input-prepend`. To append input, use the class `.input-append`. Then, within that same `<div>`, place your extra content inside a `<span>` with an `.add-on` class, and place the `<span>` either before or after the `<input>` element.

// touched up this paragraph a bit -NM

.Prepend and Append Example
image::images/boot_0228.png[]

.Prepend and Append Code Example
[source,html]
----
<div class="input-prepend">
  <span class="add-on">@</span>
  <input class="span2" id="prependedInput" type="text" placeholder="Username">
</div>
<div class="input-append">
  <input class="span2" id="appendedInput" type="text">
  <span class="add-on">.00</span>
</div>
----

If you combine both of them, you simply need to add both the `.input-prepend` and `.input-append` classes to the parent `<div>`.

.Using both the append and prepend
image::images/boot_0229.png[]

.Append and Prepend Code Example
[source,html]
----
<div class="input-prepend input-append">
  <span class="add-on">$</span>
  <input class="span2" id="appendedPrependedInput" type="text">
  <span class="add-on">.00</span>
</div>
----

Rather then using a `<span>`, you can instead use `<button>` with a class of `.btn` to attach (surprise!) a button or two to the input.

.Attach multiple buttons to an input
image::images/boot_0230.png[]

.Attach Multiple Buttons Code Example
[source,html]
----
<div class="input-append">
  <input class="span2" id="appendedInputButtons" type="text">
  <button class="btn" type="button">Search</button>
  <button class="btn" type="button">Options</button>
</div>
----

If you are appending a button to a search form, you will get the same nice rounded corners that you would expect. 

[source,html]
----
<form class="form-search">
  <div class="input-append">
    <input type="text" class="span2 search-query">
    <button type="submit" class="btn">Search</button>
  </div>
  <div class="input-prepend">
    <button type="submit" class="btn">Search</button>
    <input type="text" class="span2 search-query">
  </div>
</form>
----

.Append Button to Search Form
image::images/boot_0231.png[]

==== Form Control Sizing

With the default grid system that is inherent in Bootstrap, you can use the `.span*` system for sizing form controls. In addition to the span column-sizing method, you can also use a handful of classes that take a relative approach to sizing. If you want the input to act as a block level element, you can add `.input-block-level` and it will be the full width of the container element.

.Block Level Input
image::images/boot_0232.png[]

[source,html]
----
<input class="input-block-level" type="text" placeholder=".input-block-level">
----

// Seems like this section needs to be fleshed out a little bit. -NM
// Added another line to clear it up a bit. -JS

===== Relative Input Controls

In addition to using `.span*` for input sizing, you can also use a few different class names. 

.Relative Input Controls
image::images/boot_02in02.png[]

[source,html]
----
<input class="input-mini" type="text" placeholder=".input-mini">
<input class="input-small" type="text" placeholder=".input-small">
<input class="input-medium" type="text" placeholder=".input-medium">
<input class="input-large" type="text" placeholder=".input-large">
<input class="input-xlarge" type="text" placeholder=".input-xlarge">
<input class="input-xxlarge" type="text" placeholder=".input-xxlarge">
----

.Heads Up!
NOTE: In future versions of Bootstrap, these input classes will be altered to match the button sizes. For example, `.input-large` will increase the padding and font-size of an input.

===== Grid Sizing

You can use any `.span` from `.span1` to `.span12` for form control sizing.

.Span Sized Inputs
image::images/boot_02in03.png[]

[source,html]
----
<input class="span1" type="text" placeholder=".span1">
<input class="span2" type="text" placeholder=".span2">
<input class="span3" type="text" placeholder=".span3">
<select class="span1">
  ...
</select>
<select class="span2">
  ...
</select>
<select class="span3">
  ...
</select>
----

If you want to use multiple inputs on a line, simply use the `.controls-row` modifier class to apply the proper spacing. It floats the inputs to collapse the white space, and set the correct margins, and like the `.row` class, it also clears the float.

.Control Row
image::images/boot_0233.png[]

[source,html]
----
<div class="controls">
  <input class="span5" type="text" placeholder=".span5">
</div>
<div class="controls controls-row">
  <input class="span4" type="text" placeholder=".span4">
  <input class="span1" type="text" placeholder=".span1">
</div>
...
----

===== Uneditable Text

If you want to present a form control, but not have it editable, simple add the class `.uneditable-input`.

.Uneditable Input
image::images/boot_0234.png[]

[source,html]
----
<span class="input-xlarge uneditable-input">Some value here</span>
----

===== Form Actions

When you place the form actions at the bottom of a `.horizontal-form`, the inputs will correctly line up with the floated form controls.

.Form Controls
image::images/boot_0235.png[]

[source,html]
----
<div class="form-actions">
  <button type="submit" class="btn btn-primary">Save changes</button>
  <button type="button" class="btn">Cancel</button>
</div>
----

===== Help Text

Bootstrap form controls can have either block or inline text that flows with the inputs.

[source,html]
----
<input type="text"><span class="help-inline">Inline help text</span>
----

.Inline Help
image::images/boot_0236.png[]

To add a full width block of content, use the `.help-block` after the `<input>`.

[source,html]
----
<input type="text"><span class="help-block">A longer block of help text that breaks onto a new line and may extend beyond one line.</span>
----

.Block Help
image::images/boot_0237.png[]

==== Form Control States

In addition to the `:focus` state, Bootstrap offers styling for disabled inputs, and classes for form validation.

===== Input Focus

When an input receives `:focus`, that is to say, a user clicks into the input, or tabs into it, the outline of the input is removed, and a `box-shadow` is applied. I remember the firs time that I saw this on Twitter's site, it blew me away, and I had to dig into the code to see how they did it. In WebKit, this accomlished in the following manner:

[source, css]
----
input {
  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
  -webkit-transition: box-shadow linear 0.2s;
}

input:focus {
  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);
}
----

The `<input>` has a small inset `box-shadow`, this gives the appearence that the input sits lower then the page. When `:focus` is applied, an 8px light blue border appears. The `webkit-transition` tells the browser to apply the effect in a linera manner over 0.2 seconds. Nice and subtle, a great effect.

.Focused Input
image::images/boot_0238.png[]

[source,html]
----
<input class="input-xlarge" id="focusedInput" type="text" value="This is focused...">
----


===== Disabled Input

If you need to disable an input, simply add the `disabled` attribute to not only disable it, but change the styling, and the mouse cursor when it hover over the element.

.Disabled Input
image::images/boot_0239.png[]

[source,html]
----
<input class="input-xlarge" id="disabledInput" type="text" placeholder="Disabled input here..." disabled>
----

===== Validation States

Bootstrap includes validation styles for error, warning, info, and success messages. To use, simply add the appropriate class to the surrounding `.control-group`.

.Validation Stats
image::images/boot_0240.png[]

[source,html]
----
<div class="control-group warning">
  <label class="control-label" for="inputWarning">Input with warning</label>
  <div class="controls">
    <input type="text" id="inputWarning">
    <span class="help-inline">Something may have gone wrong</span>
  </div>
</div>
<div class="control-group error">
  <label class="control-label" for="inputError">Input with error</label>
  <div class="controls">
    <input type="text" id="inputError">
    <span class="help-inline">Please correct the error</span>
  </div>
</div>
<div class="control-group success">
  <label class="control-label" for="inputSuccess">Input with success</label>
  <div class="controls">
    <input type="text" id="inputSuccess">
    <span class="help-inline">Woohoo!</span>
  </div>
</div>
----

=== Buttons

One of my favorite features of Bootstrap is the way that buttons are styled. Dave Winer, inventor of RSS, and big fan of Bootstrap has this to say about it:

[quote, Dave Winer, scripting.com]
____
That this is needed, desperately needed, is indicated by the incredible uptake of Bootstrap. I use it in all the server software I'm working on. And it shows through in the templating language I'm developing, so everyone who uses it will find it's "just there" and works, any time you want to do a Bootstrap technique. Nothing to do, no libraries to include. It's as if it were part of the hardware. Same approach that Apple took with the Mac OS in 1984.
____

I like to think that Bootstrap is doing that, unifying the web, and allowing a unified experience of what an interface can look like across the web. With the advent of Bootstrap, you can spot the sites that have taken it up ususally first by the buttons that they use. A grid layout, and many of the other features fade into the background, but buttons, forms and other uniying elements are a key part of Bootstrap. Maybe I'm the only person that does this, but when I come across a site that is using Bootstrap, I want to give a high five to the webmaster at that domain, as they probably "just gets it". I felt the same way a few years ago whenever I saw `wp-content` in the HTML of sites that I visited.

Now, buttons, and links can all look alike with Bootstrap, anything that is given that class of `btn` will inherit the default look of a grey button with rounded corners. However, you can add color to the buttons by adding extra classes.

.Button Color Examples
[options="header"]
|=======================
|Buttons                         |Class              |Description
|image:images/btn.png[]          |`btn`              |Standard gray button with gradient
|image:images/btn-primary.png[]  |`btn btn-primary`  |Provides extra visual weight and identifies the primary action in a set of buttons
|image:images/btn-info.png[]     |`btn btn-info`     |Used as an alternative to the default styles
|image:images/btn-success.png[]  |`btn-success`      |Indicates a successful or positive action
|image:images/btn-warning.png[]  |`btn btn-warning`  |Indicates caution should be taken with this action
|image:images/btn-danger.png[]   |`btn btn-danger`   |Indicates a dangerous or potentially negative action
|image:images/btn-inverse.png[]  |`btn btn-inverse`  |Alternate dark gray button, not tied to a semantic action or use
|image:images/btn-link.png[]     |`btn btn-link`     |Deemphasize a button by making it look like a link while maintaining button behavior
|=======================

.Heads Up!
NOTE: There are issues with buttons not appearing in Internet Explorer 9 because it doesn't crop background gradients on rounded corners. Also, Internet Exporer doesn't work well with disabled button elements. The rendered text is gray with a nasty text-shadow that hasn't been fixed.

==== Button Sizes

If you need larger or smaller buttons, simply add `.btn-large`, `.btn-small`, or `.btn-mini` to links or buttons.

.Different Button Sizes
image::images/boot_0241.png[]

[source,html]
----
<p>
  <button class="btn btn-large btn-primary" type="button">Large button</button>
  <button class="btn btn-large" type="button">Large button</button>
</p>
<p>
  <button class="btn btn-primary" type="button">Default button</button>
  <button class="btn" type="button">Default button</button>
</p>
<p>
  <button class="btn btn-small btn-primary" type="button">Small button</button>
  <button class="btn btn-small" type="button">Small button</button>
</p>
<p>
  <button class="btn btn-mini btn-primary" type="button">Mini button</button>
  <button class="btn btn-mini" type="button">Mini button</button>
</p>
----

If you want to create buttons that display like a block level element, simply add the `btn-block` class. These buttons will display at 100% width.

.Block Level Button
image::images/boot_0242.png[]

[source,html]
----
<button class="btn btn-large btn-block btn-primary" type="button">Block level button</button>
<button class="btn btn-large btn-block" type="button">Block level button</button>
----

==== Disabled Button Styling

For anchor elements, simply add the class of `.disabled` to the tag, and the link will fade back in color, and will lose the gradient.

.Heads Up!
NOTE: The `.disabled` class is being used much like the `.active` class. So, no `.btn` prefix, and remember, this is only for looks, to truly disable the link, you will want to use some JavaScript to really disable the link.

.Disabled Link
image::images/boot_0243.png[]

[source,html]
----
<a href="#" class="btn btn-large btn-primary disabled">Primary link</a>
<a href="#" class="btn btn-large disabled">Link</a>
----

For a button, simply add the `disabled` attribute to the button. This will actually disable the button, so JavaScript is not directly needed.

.Disabled Button
image::images/boot_0244.png[]

[source,html]
----
<button type="button" class="btn btn-large btn-primary disabled" disabled="disabled">Primary button</button>
<button type="button" class="btn btn-large" disabled>Button</button>
----

=== Images

Images have three classes to apply some simple styles. They are `.img-rounded` that adds `border-radius:6px` to give the image rounded corners, `.img-circle` that adds makes the entire image a circle by adding `border-radius:500px` making the image round, and lastly, `ing-polaroid`, that adds a bit of padding and a grey border.

.Images
image::images/boot_0245.png[]

[source,html]
----
<img src="..." class="img-rounded">
<img src="..." class="img-circle">
<img src="..." class="img-polaroid">
----

=== Icons

Bootstrap bundles 140 icons into one sprite that can be used with buttons, links, navigation, and and form fields. The icons are provided by http://glyphicons.com/[Glyphicons].

.Iconcs by Glyphicons
image::images/boot_02in04.png[]

==== Glyphicon Attribution

Users of Bootstrap are fortunate to use the Glyphicons free of use on Bootstrap projects. The developers have asked that you use a link back to Glyphicons when practical.

[quote, Bootstrap Documentation, http://getbootstrap.com]
____
Glyphicons Halflings are normally not available for free, but an arrangement between Bootstrap and the Glyphicons creators have made this possible at no cost to you as developers. As a thank you, we ask you to include an optional link back to Glyphicons whenever practical.
____

==== Usage

To use the icons, simply use an `<i>` tag with the namespaced `.icon-` class. For example, if you wanted to use the edit icon, you would simply add the `.icon-edit` class to the `<i>` tag.

[source, html]
----
<i class="icon-edit"></i>
----

If you want to use the white icon, simply add the `.icon-white` class to the tag.

[source, html]
----
<i class="icon-edit icon-white"></i>
----

===== Button Groups

Using button groups, conbined with icons, you can create nice interface elements with minimal markup.

.Button groups
image::images/boot_02in05.png[]

[source,html]
----
<div class="btn-toolbar">
  <div class="btn-group">
    <a class="btn" href="#"><i class="icon-align-left"></i></a>
    <a class="btn" href="#"><i class="icon-align-center"></i></a>
    <a class="btn" href="#"><i class="icon-align-right"></i></a>
    <a class="btn" href="#"><i class="icon-align-justify"></i></a>
  </div>
</div>
----

===== Navigation

When you are using icons next to a string of text, make sure to add a space to provide the proper alignment of the image. More of navigation code will be covered in the next chapter.

.Basic navigation list
image::images/boot_02in06.png[]

[source, html]
----
<ul class="nav nav-list">
  <li class="active"><a href="#"><i class="icon-home icon-white"></i> Home</a></li>
  <li><a href="#"><i class="icon-book"></i> Library</a></li>
  <li><a href="#"><i class="icon-pencil"></i> Applications</a></li>
  <li><a href="#"><i class="i"></i> Misc</a></li>
</ul>
----
