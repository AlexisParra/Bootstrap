== Base CSS

At the core of Bootstrap are a set of basic HTML elements that have been styled in such a way that allow for easy enhancement via classes and user styles.

=== Typography

Starting with Typography, with the default font stack, Bootstrap has Helvitica Neau, Helvetica, Arial, and sans-serif. All body copy has the `font-size` set at 14 pixels, with the `line-height` set at 20 pixels. The `<p>` tag has a `margin-bottom` of 10 pixels, or half the `line-height`.

==== Headings

.Headings
image::images/heading.png[]

All six headings have been styled in Bootstrap, with the `<h1>` at 36 pixels high, and the `<h6>` down to 12 pixels in height. In addition, to add emphasis to any of the headings, simply add `<small>` around any of the elements, and you will get smaller text, in a lighter color. In the case of the `<h1>`, the small text is 24 pixels tall, normal font weight, and its color is grey.

[source, css]
----------
h1 small {
	font-size:24px;
	font-weight:normal;
	line-height:1;
	color:#999;
	}
----------

===== Lead body copy

To add some emphasis to a paragraph, add `class="lead"`. This will give you larger font size, lighter wieight, and a taller line height. 


[source, html]
----------
<p class="lead">Bacon ipsum dolor sit amet tri-tip pork loin ball tip frankfurter swine boudin meatloaf shoulder short ribs cow drumstick beef jowl. Meatball chicken sausage tail, kielbasa strip steak turducken venison prosciutto. Chuck filet mignon tri-tip ribeye, flank brisket leberkas. Swine turducken turkey shank, hamburger beef ribs bresaola pastrami venison rump.</p>
----------

.Lead Body Copy Classes
image::images/lead.png[]


===== Emphasis

In addition to using the `<small>` tag with headings, like I mentioned above, you can also use it with body copy. When doing so, the font becomes 85% of its original size. 

===== Bold

To add emphasis to text, simply add the `<strong>` tag. This will add the `font-weight-bold` to the text. 

===== Italics

For italics, simply add the `<em>` tag to your content. The root of em, is to add emphasis or stress to your text.

.Heads Up!
NOTE: You might be thinking to yourself, why not just use the `<b>` or `<i>` tags instead of `<em>` or `<strong>`. In HTML5, `<b>` is meant to highlight words or phrases without conveying additional importance while `<i>` is mostyle for voice, technical terms, etc.

==== Emphasis classes

With `<strong>` and `<em>`, Boootstrap also offers a few classes that can be used to provide emphasis. 

.Emphasis Classes
[source, html]
--------
<p class="muted">This content is muted</p>
<p class="text-warning">This content carries a warning class</p>
<p class="text-error">This content carries an error class</p>
<p class="text-info">This content carries an info class</p>
<p class="text-success">This content carries a success class</p>
<p>This content has <em>emphasis</em>, and can be <strong>bold</strong></p>
--------

.Emphasis Classes
image::images/emphasis-class.png[]

===== Abbreviations

The HTML `<abbr>` element is to provide markup for abbreviations or acronyms, like WWW or HTTP. By amrking up abbreviations, you can give useful information to browsers, spell checkers, translation systems or search engines. Bootstrap styles the `<abbr>` tag adding a light dotted border on the bottom, and adding the full lenth context on cover. 


.Abbreviation Example
[code, html]
--------
<abbr title="Real Simple Syndication">RSS</abbr>
--------

.Emphasis Classes
image::images/abbr.png[]

Add `.initialism` to an `<abbr>` for a slightly smaller font size.

.Abbreviation Example
[source, html]
--------
<abbr title="Real Simple Syndication">RSS</abbr>
--------

.Emphasis Classes
image::images/rotflol.png[]


===== Addresses

For screen readers, and search engines, adding an `<address>` field to you page can help with the location of physical addresses and phone numbers. It can also be used in the markup of email addresses. Since the `<address>` defaults to `display:block;` all text insde needs to have `<br>` tags if you want line breaks. 

.Address Markup
[source, html]
--------
<address>
  <strong>O'Reilly Media, Inc.</strong><br>
  1005 Gravenstein HWY North<br>
  Sebastopol, CA 95472<br>
  <abbr title="Phone">P:</abbr> (707) 827-7000
</address>

<address>
  <strong>Jake Spurlock</strong><br>
  <a href="mailto:#">flast@oreilly.com</a>
</address>
--------

.Address Tag
image::images/address.png[]


===== Blockquotes

If you are going to be quoting blocks of text in your document, add the `<blockquote>` around the text. For best results, and for line breaks, wrap each section in a `<p>` tag. The default styling involves indenting the text, and adding a thick grey border on the left side. To idenify a source, add the `<small>` tag, with the author inside of a `<cite>` tag. When you put it all together, you get something that looks like this: 

.Blockquote Markup
[source, html]
--------
<blockquote>
	<p>That this is needed, desperately needed, is indicated by the incredible uptake of Bootstrap. I use it in all the server software I'm working on. And it shows through in the templating language I'm developing, so everyone who uses it will find it's "just there" and works, any time you want to do a Bootstrap technique. Nothing to do, no libraries to include. It's as if it were part of the hardware. Same approach that Apple took with the Mac OS in 1984.</p>
	<small>Developer of RSS, <cite title="Source Title">Dave Winer</cite></small>
</blockquote>
--------

.Heads Up!
NOTE: If you would like to have a `<blockquote>` with content that is `right-aligned`, simply add `.pull-right` to the tag. In addition to the right-aligned text, the entire `blockquote` is floated the right. This will create nice pull-quotes in a your content.


.Pull-Right Blockquote
image::images/pull-right-blockquote.png[]

==== Lists

Bootstrap offers support and styling for the three main lists that HTML offers; ordered, unordered, and definition lists. An ordered list is a list that doesn't need to have order, and is traditionally styled with bullets. 

===== Unordered List

.Unordered List Markup
[source, html]
--------

<h3>Favorite Outdoor Activites</h3>
<ul>
	<li>Backpacking in Yosemite</li>
	<li>Hiking in Arches
		<ul>
			<li>Delicate Arch</li>
			<li>Park Avenue</li>
		</ul>
	</li>
	<li>Biking the Flintstones Trail</li>
</ul>

--------

.Unordered List Example
image::images/ul.png[]


===== Ordered List

If you have an ordered list that you would like to remove the bullets from, simply add `class="unstyled"` to the opening `<ul>` tag. Personally, I hold a strong aversion to using the `<br>` tag, and when I want a single spaced line break, I place each line in an unstyled unordered list. As an example, you might want a condensed address box, like the illustration above, you could have each line as a `<li>`. In my mind, this is the more semantic way to markup the text.


An ordered list is prefaced by numbers, rather then bullets. This is handy when you want to build a list of numbered items, like a task list, guide items, or even a list of comments on a blog post.

.Ordered List Markup
[source, html]
--------

<h3>Self-Referential Task List</h3>
<ol>
	<li>Turn off the internet.
	<li>Right the book</li>
	<li>... Profit?</li>
</ul>

--------

.Ordered List Example
image::images/ol.png[]

===== Definition List

The third type of list with Bootstrap is the definition list. The definition list differs from the ordered and unordered list in that instead of just having block level `<li>` elements, you have the `<dt>` and `<dd>` elements. The `<dt>` is the definition term, and like a dictionary, this is the term that is being defined. Subsequently, the `<dd>` is the defintion of the `<dt>`. A lot of times in markup, you will see people using an unordered list, and then placing an heading, along with other text. This works, but maybe isn't the most semantic way to markup the text. A better idea would be to create a `<dl>` and the style the `<dt>` and `<dd>` as you would the heading and the text. That being said, out of the box, Bootstrap offers some clean default styles, and an option for a horizontal layout.

.Definition List Markup
[source, html]
--------
<h3>Common Electronics Parts</h3>
<dl>
	<dt>LED</dt>
	<dd>A light-emitting diode (LED) is a semiconductor light source.</dd>
	<dt>Servo</dt>
	<dd>Servos are small, cheap, mass-produced actuators used for radio control and small robotics.</dd>
</dl>
--------

.Definition List Example
image::images/dl.png[]

To change the `<dl>` to a horizontal layout, with the `<dt>` on the left side, and the `<dd>` on the right, simply add `class="dl-horizontal"` to the opening tag.

.Horizontal Definition List Example
image::images/dlz.png[]

.Heads Up!
NOTE: Horizontal description lists will truncate terms that are too long to fit in the left column with `text-overflow`. In narrower viewports, they will change to the default stacked layout.

=== Code

There are two different key ways to display code with Bootstrap. The first is the `<code>` tag, and the second is with the `<pre>` tag. The primary difference to keep in mind is if you are going to be displaying code inline, then you should use the `<code>` tag, and if it needs to be displayed as a block element, or has multiple lines, then you should use the `<pre>` tag. 

[source, html]
--------
<p>Instead of always using divs, in HTML5, you can use new elements like <code>&lt;section&gt;</code>, <code>&lt;header&gt;</code>, and <code>&lt;footer&gt;</code>. The html should look something like this:</p>
<pre>
  <article>
    <h1>Article Heading</h1>
  </article>
</pre>
--------

.Heads Up!
NOTE: Make sure that when you use the pre and code tags, that you use the unicode variants for the opening and closing tags. `&lt;` and `&gt;`


=== Tables

One of my favorite parts of Bootstrap is the nice way that tables are handled. I do a lot of work looking at and building tables, and the nice clean layout is nice feature of Bootstrap. Bootstrap supports the folloing elements:

.Table Elements Bootsrap Supports
[frame="topbot",options="header"]
|======================
|Tag           |Description
|`<table>`     |Wrapping element for displaying data in a tabular format
|`<thead>`     |Container element for table header rows (`<tr>`) to label table columns
|`<tbody>`     |Container element for table rows (`<tr>`) in the body of the table
|`<tr>`        |Container element for a set of table cells (`<td>` or `<th>`) that appears on a single row
|`<td>`        |Default table cell
|`<th>`        |Special table cell for column (or row, depending on scope and placement) labels. Must be used within a `<thead>`
|`<caption>`   |Description or summary of what the table holds, especially useful for screen readers
|======================


At the core, if you want a nice basic style with light padding, and only horizontal dividers, add the base class `.table` to any table.

.Table Base Class
[source, html]
--------
<table class="table">
  <caption>...</caption>
  <thead>
    <tr>
      <th>...</th>
      <th>...</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>...</td>
      <td>...</td>
    </tr>
  </tbody>
</table>
--------

.Optional Table Row Classes
[frame="topbot",options="header"]
|======================
|Class         |Description
|`.success`    |Indicates a successful or positive action.
|`.error`      |Indicates a dangerous or potentially negative action.
|`.warning`    |Indicates a warning that might need attention.
|`.info        |Used as an alternative to the default styles.
|======================

.Table Row Classes Example
image::images/tr.png[]

=== Forms

Another one of the highlights of using Bootstrap is the attention that is paid to forms. As a web developer, one of my least favorite things to do is style forms. With Bootstrap, that is easy to do with the simple markup, and extended classes for sifferent styles of forms.

The basic form structure creates styled markup, without needing to add any extra helper classes.


.Basic Form
image::images/basic-form.png[]

.Basic Form Structure
[source, html]
----
<form>
	<fieldset>
		<legend>Legend</legend>
			<label>Label name</label>
			<input type="text" placeholder="Type something…">
			<span class="help-block">Example block-level help text here.</span>
			<label class="checkbox">
				<input type="checkbox"> Check me out
			</label>
		<button type="submit" class="btn">Submit</button>
	</fieldset>
</form>
----

==== Optional Form Layouts

===== Search Form

With a few helper classes, you can dynamically update the layout of your form. In the first case, simply add `.form-search` to the `form` tag, and then `.search-query` to the `<input>` for an input with rounded corners, and an inline submit button.

.Basic Form Structure
[source, html]
----
<form class="form-search">
  <input type="text" class="input-medium search-query">
  <button type="submit" class="btn">Search</button>
</form>
----

.Search Form
image::images/form-search.png[]

===== Inline Form

To create a form where all of the elements are inline, and labels are along side, add the class `.form-horizontal` to the `form tag.


.Inline Form Code
[source, html]
----
<form class="form-inline">
	<input type="text" class="input-small" placeholder="Email">
	<input type="password" class="input-small" placeholder="Password">
	<label class="checkbox">
		<input type="checkbox"> Remember me
	</label>
	<button type="submit" class="btn">Sign in</button>
</form>
----

.Inline Form Example
image::images/form-inline.png[]

===== Horizonatal Form

Bootstrap offers the markup for a horizontal form that stands apart from the others in not only the amount of markup, but but in the presentation of the form. Traditionally if you wanted a form layout like this, you would use a table, but Bootstrap manages to do it without, and if using the responsive CSS, will be adapt to smaller layouts by stacking the controls.

To create a form with the horizontal layout, do the following:

* Add `.form-horizontal` to the form
* Wrap labels and controls in `.control-group`
* Add `.control-label` to the label
* Wrap any associated controls in `.controls` for proper alignment

.Horizontal Form Example
image::images/form-horizontal.png[]

.Horizontal Form Code
[source, html]
----
<form class="form-horizontal">
  <div class="control-group">
    <label class="control-label" for="inputEmail">Email</label>
    <div class="controls">
      <input type="text" id="inputEmail" placeholder="Email">
    </div>
  </div>
  <div class="control-group">
    <label class="control-label" for="inputPassword">Password</label>
    <div class="controls">
      <input type="password" id="inputPassword" placeholder="Password">
    </div>
  </div>
  <div class="control-group">
    <div class="controls">
      <label class="checkbox">
        <input type="checkbox"> Remember me
      </label>
      <button type="submit" class="btn">Sign in</button>
    </div>
  </div>
</form>
----

==== Supported Form Controls

Bootstap natively supports the most common form controls. Chief among them, `input`, `textarea`, `checkbox` and `radio`, and `select`. 

===== Inputs

The most common text field is the input. Bootstrap offers support for all native HTML5 types: text, password, datetime, datetime-local, date, month, time, week, number, email, url, search, tel, and color.

.Input Example
image::images/input.png[]

.Input Code
[source, html]
----
<input type="text" placeholder="Text input">
----

.Heads Up!
NOTE: Of note, when using both `input`, and `textarea`, in the `:active` state, the default to a nice blue glow.
image::images/input-active.png[]

===== Textarea

The `textarea` is used when you need to have multiple lines of input. The main control that you can modify is changing the `rows` attribute to the amount of rows that you need to support.

.Both the `:active`, and the default `textarea`
image::images/textarea.png[]

.Textarea Example
[source,html]
----
<textarea rows="3"></textarea>
----

===== Checkboxes and radios

When building a form, use the `checkbox` if you want the user to select from many options, and the `radio` if you just want them to select one.

.Radio and Checkbox example
image::images/radio.png[]

.Radio and Checkbox Code Example
[source,html]
----
<label class="checkbox">
  <input type="checkbox" value="">
  Option one is this and that—be sure to include why it's great
</label>
 
<label class="radio">
  <input type="radio" name="optionsRadios" id="optionsRadios1" value="option1" checked>
  Option one is this and that—be sure to include why it's great
</label>
<label class="radio">
  <input type="radio" name="optionsRadios" id="optionsRadios2" value="option2">
  Option two can be something else and selecting it will deselect option one
</label>
----

.Inline Checkboxes
image::images/radio.png[]

If you want checkboxes to appear on the same line, simply add the `.inline` class to a series of checkboxes or radios.

[source,html]
----
<label class="checkbox inline">
  <input type="checkbox" id="inlineCheckbox1" value="option1"> 1
</label>
<label class="checkbox inline">
  <input type="checkbox" id="inlineCheckbox2" value="option2"> 2
</label>
<label class="checkbox inline">
  <input type="checkbox" id="inlineCheckbox3" value="option3"> 3
</label>
----

===== Selects

A select is used when you want to allow the user to pick from multiple options. Use `multiple="multiple"` to allow the user to select more then one option.

.Select Example
image::images/select.png[]

.Select Code Example
[source,html]
----
<select>
  <option>1</option>
  <option>2</option>
  <option>3</option>
  <option>4</option>
  <option>5</option>
</select>
 
<select multiple="multiple">
  <option>1</option>
  <option>2</option>
  <option>3</option>
  <option>4</option>
  <option>5</option>
</select>
----

==== Extending Form Controls

In addition to the basic form controls listed in the previous section, Bootstrap offers other form components that can be very nice to use. The first batch is prepended and appended inputs.

===== Prepended and Appended Inputs

With adding prepended and appended content to an input, you can add common elements like the dollar symbol, the `@` for a Twitter username or anything else that might be common for your application interface. To use, wrap the input with `.input-prepend` or `.input-append` and simply place a `<span>` with an `.add-on` class either before or after an input to append it to the input.

.Append and Prepend Example
image::images/append.png[]

.Append and Prepend Code Example
[source,html]
----
<div class="input-prepend">
  <span class="add-on">@</span>
  <input class="span2" id="prependedInput" type="text" placeholder="Username">
</div>
<div class="input-append">
  <input class="span2" id="appendedInput" type="text">
  <span class="add-on">.00</span>
</div>
----

If you combine both of them, you simply need to add both the `.input-prepend` and `.input-append` class to the parent `<div>`.

.Using both the append and prepend
image::images/both.png[]

.Append and Prepend Code Example
[source,html]
----
<div class="input-prepend input-append">
  <span class="add-on">$</span>
  <input class="span2" id="appendedPrependedInput" type="text">
  <span class="add-on">.00</span>
</div>
----

Rather then using a `<span>`, you can use a `btn` class, and attach a button or two to the input.

.Attach multiple buttons to an input
image::images/multiple.png[]

.Attach Multiple Buttons Code Example
[source,html]
----
<div class="input-prepend input-append">
  <span class="add-on">$</span>
  <input class="span2" id="appendedPrependedInput" type="text">
  <span class="add-on">.00</span>
</div>
----



=== Buttons

=== Images

=== Icons