== Javascript 

Most of the componants discussed in the previous chapter are just the beginning. Bootstrap comes bundled with 13 jQuery plugins that that extend the features, and can add more interaction to your sute.

=== Overview

Bootstrap cand be included on your site in two forms, either compiled or raw. Bootstrap 2.2.2 the uncompressed file is 59kb, and the minimized version is only 32kb. All of the Bootstrap plugins are accessible entirely using the included data API, with this, you don't need to include a single line of javascript to invoke any of the plugins features.

If you need to turn off the data API, you can unbind the attributes by adding this line of Javascript.

.Disable Bootstrap Javascript Data API
[source, js]
----
$('body').off('.data-api')
----

If you need to disable a single plugin, you can do it programmatically using the namespace of the plugin along with the `data-api` namespace.

.Disable an Individual Plugin
[source, js]
----
$('body').off('.alert.data-api')
----

==== Programattic API

The devlelopers of Bootstrap believe that you should be able to use all of the plugins entirely throught the Javascript API. All public APIs are single, chainable methods, and return the collection acted upon.

[source, js]
----
$('.btn.danger').button('toggle').addClass('active')
----

All methods should accept an optional options object, a string which targets a particular method, or nothing (which initiates a plugin with default behavior).

[source, js]
----
$("#myModal").modal()						// initialized with defaults
$("#myModal").modal({ keyboard: false })	// initialized with no keyboard
$("#myModal").modal('show')					// initializes and invokes show immediately
----

=== Transitions

The transition plugin provides simple transition effects. A few examples include:

* Sliding or fading in modals
* Fading out tabs
* Fading out alerts
* Sliding carousel panes

=== Modal

Modals are windows that overlay the content of the page. They can provide information, provide interaction, or do anything else that you desire. I have used that as a window for holding slideshows, login/registration information, and more. Probably one of my favorite Bootstrap features.

To create a static example, use the code below.

.Static Modal Window
image::images/modal.png[]

.Static Modal Modal Window Code Example
[source, html]
----
<div class="modal hide fade">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
		<h3>Modal header</h3>
	</div>
	<div class="modal-body">
		<p>One fine body…</p>
	</div>
	<div class="modal-footer">
		<a href="#" class="btn">Close</a>
		<a href="#" class="btn btn-primary">Save changes</a>
	</div>
</div>
----

To invoke the modal window, you need to have some kind of a trigger. Normally I use a button or an link. If you look in the code below, you wiwll see that the `<a>` tag, the `href="myModal"` is the target of the modal that you want to load on the page. The allows you yo load multiple modals, and then have different triggers for each of them.

[source, html]
----
<!-- Button to trigger modal -->
<a href="#myModal" role="button" class="btn" data-toggle="modal">Launch demo modal</a>
 
<!-- Modal -->
<div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
		<h3 id="myModalLabel">Modal header</h3>
	</div>
	<div class="modal-body">
		<p>One fine body…</p>
	</div>
	<div class="modal-footer">
		<button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
		<button class="btn btn-primary">Save changes</button>
	</div>
</div>
----

==== Modal Usage

===== Via Data Attributes

Using the Bootstrap Javascript Data API, you simply need to pass a few data attributes to toggle the slideshow. To start with, set `data-toggle="modal"` on the link or button that you want to use to invoke the modal and then `data-target="#foo"` to the ID of the modal that you'd like to use.

====== Via Javascript

To call a modal with `id="myModal"` with a single line of JavaScript:

[source, js]
----
$('#myModal').modal(options)
----

==== Modal Options

Options can either be passed in via data attributes, or with Javascript. To use the data attributes, prepend `data-` to the option name, like, `data-backdrop=""`.

.Modal Options
[options="header"]
|=======================
|Name 		|Type       |Default 	|Description
|backdrop 	|boolean	|true		|Includes a modal-backdrop element. Alternatively, specify static for a backdrop which doesn't close the modal on click.
|keyboard 	|boolean	|true		|Closes the modal when escape key is pressed
|show 		|boolean	|true		|Shows the modal when initialized.
|remote 	|path 		|false		|If a remote url is provided, content will be loaded via jQuery's load method and injected into the .modal-body. If you're using the data api, you may alternatively use the href tag to specify the remote source.
|=======================


==== Methods

===== Options
Activates your content as a modal. Accepts an optional options object.

..modal(options)
[source, js]
----
$('#myModal').modal({
	keyboard: false
})
----

===== Toggle
Manually toggles a modal.

..modal('toggle')
[source, js]
----
$('#myModal').modal('toggle')
----

===== Show
Manually opens a modal.

..modal('show')
[source, js]
----
$('#myModal').modal('show')
----

===== Hide
Manually hides a modal.

..modal('hide')
[source, js]
----
$('#myModal').modal('hide')
----

==== Events

If you need specific events during the firing events of Bootstrap's modals, you can use the folloing events.

.Modal Events
[options="header"]
|=======================
|Event 	|Description
|show	|This event fires immediately when the `show` instance method is called.
|shown	|This event is fired when the modal has been made visible to the user (will wait for css transitions to complete).
|hide	|This event is fired immediately when the `hide` instance method has been called.
|hidden	|This event is fired when the modal has finished being hidden from the user (will wait for css transitions to complete).		|
|=======================

[source, js]
----
$('#myModal').on('hidden', function () {
	 alert('Hey girl, I heard you like modals...c');
})
----


=== Dropdown

The dropdown was covered extensively in chapter 3, but then, the interaction was simply glossed over. As a refresher, dropdowns can be added to the the navbar, pills, tabs and buttons.

==== Dropdown Usage via the Data API

To use, add use `data-toggle="dropdown"` to a link or button to toggle the dropdown.

.Dropdown Within Navbar 
image::images/dropdown-javascript.png[]

.Dropdown Code Example with Data Attributes
[source, html]
----
<div class="dropdown">
	<a class="dropdown-toggle" data-toggle="dropdown" href="#">Dropdown trigger</a>
	<ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
		...
	</ul>
</div>
----

If you need to keep links entact, useful if the browser is not enabling Javascript, use the `data-target` attribute instead of `href="#"`.

.Dropdown via the `data-target` Attribute
[source, html]
----
<div class="dropdown">
	<a class="dropdown-toggle" id="dLabel" role="button" data-toggle="dropdown" data-target="#" href="/page.html">
		Dropdown
		<b class="caret"></b>
	</a>
	<ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
		...
	</ul>
</div>
----

==== Dropdown Usage via Javascript

To call the dropdown toggle via Javascript, use the following method.

.Dropdown via Javascript
[source, js]
----
$('.dropdown-toggle').dropdown()
----

==== Methods

The dropdown toggle has a simple method to toggle the dropdown. There are no options.

[source, js]
----
$().dropdown('toggle')
----


=== Scrollspy

The scrollspy plugin allows you to target sections of the page based on scroll position. In its basic implementation, as you scroll you can add active classes to the nav bar based on the scroll postion. To add the scrollspy plugin via data attributes, add `data-spy="scroll"` to the element you want to spy on (most typically this would be the body) and `data-target=".navbar"` to the navbar that you want to apply the class changes to. 

image::images/scrollspy.png[]

==== Usage

.Body Configuration for Scrollspy
[source, html]
----
<body data-spy="scroll" data-target=".navbar">...</body>
----

In the navbar, you will need to have page anchors that will serve as indicators for the element to spy on. 

.Navbar Setup for Scrollspy
[source, html]
----
<div class="navbar">
	<div class="navbar-inner">
		<div class="container">
			<a class="brand" href="#">Jake's BBQ</a>
			<div class="nav-collapse">
				<ul class="nav">
					<li class="active"><a href="#">Home</a></li>
					<li><a href="#pork">Pork</a></li>
					<li><a href="#beef">Beef</a></li>
					<li><a href="#chicken">Chicken</a></li>
				</ul>
			</div><!-- /.nav-collapse -->
		</div>
	</div><!-- /navbar-inner -->
</div>
----

===== Usage via Javascript

.Javascript Usage
[source, js]
----
$('#navbar').scrollspy()
----

==== Scrollspy Methods

===== .scrollspy('refresh')

When calling the scrollspy via the Javascript method, you will need to call the .refresh method to update the DOM.

[source, js]
----
$('[data-spy="scroll"]').each(function () {
	var $spy = $(this).scrollspy('refresh')
});
----

==== Options

Options can be passed via data attributes or JavaScript. For data attributes, append the option name to data-, as in data-offset="".


.Scrollspy Options
[options="header"]
|=======================
|Name	|type	|default	|description
|offset	|number	|10			|Pixels to offset from top when calculating position of scroll.
|=======================

==== Events

[options="header"]
|=======================
|Event		|Description
|activate	|This event fires whenever a new item becomes activated by the scrollspy.
|=======================


=== Toggleable Tabs

That tabbable tabs were introduced back in chapter 3. Combing a few data attributes, you can easily create a tabbed interface. To do so, create the nav interface, and then wrap the content of the tabs inside a `<div>` with a class of `.tab-content`.

.Toggleable Tabs
image::images/toggleable-tabs.png[]

.Basic Markup of Toggleable Tabs
[source, html]
----
<ul class="nav nav-tabs">
	<li><a href="#home" data-toggle="tab">Home</a></li>
	<li><a href="#profile" data-toggle="tab">Profile</a></li>
	<li><a href="#messages" data-toggle="tab">Messages</a></li>
	<li><a href="#settings" data-toggle="tab">Settings</a></li>
</ul>
 
<div class="tab-content">
	<div class="tab-pane active" id="home">...</div>
	<div class="tab-pane" id="profile">...</div>
	<div class="tab-pane" id="messages">...</div>
	<div class="tab-pane" id="settings">...</div>
</div>
----

==== Usage

To enable the tabs, you can use the Bootstrap Data API, or using Javascript directly. With the Data API, you need to add `data-toggle` to the anchors. The target of the anchors will activate the content of that `<div>`. Alternatively, instead of using the `href="#"`, you can also use `data-target=""` with the ID of the `.tab-pane` that you want to target.

.Enable Tabs via Javascript
[source, js]
----
 $('#myTab a').click(function (e) {
	e.preventDefault();
	$(this).tab('show');
})
----

.Example of different ways to activate tabs
[source, js]
----
$('#myTab a[href="#profile"]').tab('show'); // Select tab by name
$('#myTab a:first').tab('show'); // Select first tab
$('#myTab a:last').tab('show'); // Select last tab
$('#myTab li:eq(2) a').tab('show'); // Select third tab (0-indexed)
----

==== Events

[options="header"]
|=======================
|Event 	|Description
|show	|This event fires on tab show, but before the new tab has been shown. Use `event.target` and `event.relatedTarget` to target the active tab and the previous active tab (if available) respectively.
|shown 	|This event fires on tab show after a tab has been shown. Use `event.target` and `event.relatedTarget` to target the active tab and the previous active tab (if available) respectively.
|=======================

.Example of shown method
[source, js]
----
$('a[data-toggle="tab"]').on('shown', function (e) {
	e.target // activated tab
	e.relatedTarget // previous tab
})
----

=== Tooltips

Tooltips are useful when you need to describe a link, or perphaps used in conjuction with the `<abbr>` tag, provide the defintion of an abbreviation. The plugin was originally based on the jQuery.tipsy plugin written by Jason Frame. It has since been updated to work without images, animate with a CSS animation, and work with the Bootstrap Javascript API.

.Tooltip Placement
image::images/tooltips.png[]

==== Usage

.Bootstrap Data API
[source, js]
----
<a href="#" rel="tooltip" title="This is the tooltip">Tooltip Example</a>
----

.Javasscript
[source, js]
----
$('#example').tooltip(options)
----

==== Options

Like all of the plugins, there are options that can be added via the Bootstrap Data API, or invoked via Javascript.

[options="header"]
|=======================
|Name 		|type 				|default 	|description
|animation 	|boolean			|true		|apply a css fade transition to the tooltip
|html 		|boolean			|false		|Insert html into the tooltip. If false, jquery's `text` method will be used to insert content into the dom. Use text if you're worried about XSS attacks.
|placement	|string/function 	|\'top\'	|how to position the tooltip - top/bottom/left/right
|selector	|string				|false		|If a selector is provided, tooltip objects will be delegated to the specified targets.
|title		|string/function	|''			|default title value if `title` tag isn't present
|trigger	|string				|\'hover\'	|how tooltip is triggered - click | hover | focus | manual
|delay 		|number/object		|0 			|delay showing and hiding the tooltip (ms) - does not apply to manual trigger type If a number is supplied, delay is applied to both hide/show Object structure is: `delay: { show: 500, hide: 100 }`
|=======================


==== Methods

===== Options

Attaches a tooltip handler to an element collection.

[source, html]
----
$().tooltip(options)
----


==== Show

Reveals an element's tooltip.

[source, html]
----
$('#element').tooltip('show')
----

===== Hide

Hides an element's tooltip.

[source, js]
----
$('#element').tooltip('hide')
----

===== Toggle

Toggles an element's tooltip.

[source, js]
----
$('#element').tooltip('toggle')
----

===== Destroy

Hides and destroys an element's tooltip.

[source, js]
----
$('#element').tooltip('destroy')
----

=== Popover

The popover is a sibling of the tooltip, offering an entended view, complete with a heading. For the popver to activate, a person just needs to hover over the element. The content of the popver can be populated entirely using the Bootstrap Data API.

.Popover Placement
image::images/popover.png[]

[source, html]
----
<a href="#" class="btn" rel="popover" title="Using Popover" data-content="Just add content to the data-content attribute.">Click Me!</a>
----


==== Usage

.Enable with Javascript
[source, js]
----
$('#example').popover(options)
----

==== Options

All options can be passed via the Boostrap Data API, or directly with Javascript.

[options="header"]
|=======================
|Name  type  default description
|animation|boolean          |true     |apply a css fade transition to the tooltip
|html     |boolean          |false    |Insert html into the popover. If false, jquery's text method will be used to insert content into the dom. Use text if you're worried about XSS attacks.
|placement|string/function  |'right'  |how to position the popover - top/bottom/left/right
|selector |string           |false    |if a selector is provided, tooltip objects will be delegated to the specified targets
|trigger  |string           |'click'  |how popover is triggered - click/hover/focus/manual
|title    |string/function  |''       |default title value if `title` attribute isn't present
|content  |string/function  |''       |default content value if `data-content` attribute isn't present
|delay    |number/object    |0 				|Delay showing and hiding the popover (ms) - does not apply to manual trigger type. If a number is supplied, delay is applied to both hide/show. Object structure is: `delay: { show: 500, hide: 100 }`.




=== Alert

=== Button

=== Collapse

=== Carousel

=== Typeahead

=== Affix
