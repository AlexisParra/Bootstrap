== Bootstrap JavaScript Plug-Ins

The components discussed in <<bootstrap_layout>> are just the beginning. Bootstrap comes bundled with 13 jQuery plug-ins that extend the features and can add more interaction to your site. To get started with Bootstrap's JavaScript plug-ins, you don't need to be an advanced JavaScript developer. In fact, by utilizing Bootstrap data API, most of the plug-ins can be triggered without writing a single line of code.

=== Overview

Bootstrap can be included on your site in two forms, either compiled or raw. In Bootstrap 2.2.2, the uncompressed file is 59KB and the minimized version is only 32KB. All of the Bootstrap plug-ins are accessible using the included data API, with this, you don't need to include a single line of JavaScript to invoke any of the plug-in features.

Typically, JavaScript lies in a either a separate file or at the bottom of the page before the closing `</body>` tag. You can either use the `src` attribute to link to another file, or you can write the contents of the file between the opening and closing tags.

.JavaScript Usage
[source, html]
----
<!-- To reference another JavaScript file -->
<script src="assets/js/javaScript.js"></script>

<!-- To write JavaScript to the page -->
<script type="text/javaScript">
	function js_alert{
		alert('Page has loaded');
	}
</script>
----

Generally, it is best to include all JavaScript calls into a check that ensures that the DOM has been loaded on the page. If you have the JavaScript trying to fire earlier, it may miss elements as the browser parses the page. With jQuery, adding a check is easily done by selecting the `document` or the entire content of the page, and then applying the `.ready()` method:

[source, js]
----
$(document).ready(function(){
	alert('Page has loaded');
	// Once the page has loaded and is ready, an alert will fire.
});
----

As mentioned above, Bootstrap has a data API where you can write data attributes into the HTML of the page. If you need to turn off the data API, you can unbind the attributes by adding the following line of JavaScript:

[source, js]
----
$('body').off('.data-api')
----

If you need to disable a single plugin, you can do it programmatically using the namespace of the plugin along with the `data-api` namespace:

[source, js]
----
$('body').off('.alert.data-api')
----

==== Programmatic API

The developers of Bootstrap believe that you should be able to use all of the plug-ins throughout the JavaScript API. All public APIs are single, chainable methods and return the collection acted upon.

[source, js]
----
$('.btn.danger').button('toggle').addClass('active')
----

All methods should accept an optional options object, a string which targets a particular method, or nothing (which initiates a plugin with default behavior).

[source, js]
----
$("#myModal").modal()						// initialized with defaults
$("#myModal").modal({ keyboard: false })	// initialized with no keyboard
$("#myModal").modal('show')					// initializes and invokes show immediately
----

=== Transitions

The transition plugin provides simple transition effects. A few examples include:

* Sliding or fading in modals
* Fading out tabs
* Fading out alerts
* Sliding carousel panes

=== Modal

A modal is a child window that is layered over its parent window. Typically, the purpose is to display content from a separate source that can have some interaction without leaving the parent window. They can provide information, interaction, or more. I have used that as a window for holding slideshows and login/registration information. The Modal plug-ins is probably one of my favorite Bootstrap features.

To create a static example, use the code below.

.Static Modal Window
image::images/boot_0401.png[]

.Static Modal Window Code Example
[source, html]
----
<div class="modal hide fade">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
		<h3>Modal header</h3>
	</div>
	<div class="modal-body">
		<p>One fine body…</p>
	</div>
	<div class="modal-footer">
		<a href="#" class="btn">Close</a>
		<a href="#" class="btn btn-primary">Save changes</a>
	</div>
</div>
----

To invoke the modal window, you need to have some kind of a trigger. Normally I use a button or an link. If you look in the code below, you will see that in the `<a>` tag, the `href="myModal"` is the target of the modal that you want to load on the page. The allows you to create multiple modals on the page, and then have different triggers for each of them. Now, to be clear, you don't load multiple modals at the same time, but can create many on the page to be loaded at different times.

There are three classes to take note of in the modal. The first is `modal`. This should make sense, but this is identifying the content of the `<div>` as a modal. The second is `.hide`. This tells the browser to hide the content of the `<div>` until we are ready to invoke it. And last, the `.fade` class. When the modal is toggled, it will cause the content to fade in and out.

[source, html]
----
<!-- Button to trigger modal -->
<a href="#myModal" role="button" class="btn" data-toggle="modal">Launch demo modal</a>

<!-- Modal -->
<div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
		<h3 id="myModalLabel">Modal header</h3>
	</div>
	<div class="modal-body">
		<p>One fine body…</p>
	</div>
	<div class="modal-footer">
		<button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
		<button class="btn btn-primary">Save changes</button>
	</div>
</div>
----

==== Using Modal through Data Attributes

Using the Bootstrap JavaScript Data API, you simply need to pass a few data attributes to toggle the slideshow. To start with, set `data-toggle="modal"` on the link or button that you want to use to invoke the modal and then set the `data-target="#foo"` to the ID of the modal that you'd like to use.

Using Modal through JavaScript

To call a modal with `id="myModal"` use a single line of JavaScript:

[source, js]
----
$('#myModal').modal(options)
----

==== Modal Options

Options can either be passed in via data attributes, or with JavaScript. To use the data attributes, prepend `data-` to the option name, like, `data-backdrop=""`.

.Modal Options
[options="header"]
|=======================
|Name 		|Type       |Default 	|Description
|backdrop 	|Boolean	|true		|Set to false if you don't want the modal to be closed when they click outside of the modal.
|keyboard 	|Boolean	|true		|Closes the modal when escape key is pressed, set to false to disable.
|show 		|Boolean	|true		|Shows the modal when initialized.
|remote 	|path 		|false		|Using the jQuery `.load` method, inject content into the modal body. If an `href` with a valid URL is added, that will load that content.
|=======================


==== Methods

===== Options
Activates your content as a modal. Accepts an optional options object.

..modal(options)
[source, js]
----
$('#myModal').modal({
	keyboard: false
})
----

===== Toggle
Manually toggles a modal.

..modal('toggle')
[source, js]
----
$('#myModal').modal('toggle')
----

===== Show
Manually opens a modal.

..modal('show')
[source, js]
----
$('#myModal').modal('show')
----

===== Hide
Manually hides a modal.

..modal('hide')
[source, js]
----
$('#myModal').modal('hide')
----

==== Events

Bootstrap provides the following events if you need to hook into the function.

.Modal Events
[options="header"]
|=======================
|Event 	|Description
|show	|Fired after the `show` method is called.
|shown	|Fired when the modal has been made visible to the user.
|hide	|Fired when the `hide` instance method has been called.
|hidden	|Fired when the modal has finished being hidden from the user.
|=======================

As an example, after the modal is hidden, you could cause an alert to fire.

[source, js]
----
$('#myModal').on('hidden', function () {
	 alert('Hey girl, I heard you like modals...');
})
----


=== Dropdown

The dropdown was covered extensively in chapter 3, but then, the interaction was simply glossed over. As a refresher, dropdowns can be added to the the navbar, pills, tabs and buttons.

==== Usage

To use, add use `data-toggle="dropdown"` to a link or button to toggle the dropdown.

.Dropdown Within Navbar
image::images/boot_0402.png[]

.Dropdown Code Example with Data Attributes
[source, html]
----
<li class="dropdown">
	<a href="#" id="drop" role="button" class="dropdown-toggle" data-toggle="dropdown">Word <b class="caret"></b></a>
	<ul class="dropdown-menu" role="menu" aria-labelledby="drop">
		<li><a tabindex="-1" href="#">MAKE magazine</a></li>
		<li><a tabindex="-1" href="#">WordPress DevelopmentS</a></li>
		<li><a tabindex="-1" href="#">Speaking Engagements</a></li>
		<li class="divider"></li>
		<li><a tabindex="-1" href="#">Social Media</a></li>
	</ul>
</li>
----

If you need to keep links entact, useful if the browser is not enabling JavaScript, use the `data-target` attribute along with `href="#"`.

.Dropdown via the `data-target` Attribute
[source, html]
----
<div class="dropdown">
	<a class="dropdown-toggle" id="dLabel" role="button" data-toggle="dropdown" data-target="#" href="/page.html">
		Dropdown
		<b class="caret"></b>
	</a>
	<ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
		...
	</ul>
</div>
----

==== Dropdown Usage via JavaScript

To call the dropdown toggle via JavaScript, use the following method.

.Dropdown via JavaScript
[source, js]
----
$('.dropdown-toggle').dropdown()
----

==== Method

The dropdown toggle has a simple method to show or hide the dropdown. There are no options.

[source, js]
----
$().dropdown('toggle')
----


=== Scrollspy

The scrollspy plugin allows you to target sections of the page based on scroll position. In its basic implementation, as you scroll you can add `.active` classes to the nav bar based on the scroll postion. To add the scrollspy plugin via data attributes, add `data-spy="scroll"` to the element you want to spy on (most typically this would be the body) and `data-target=".navbar"` to the navbar that you want to apply the class changes to. For this to work, you must have elements in the body of the page that have matching ids of the links that you are spying on.

.Scrollspy Example
image::images/boot_04in01.png[]

==== Usage

For Scrollspy, you will need to add `data-spy="scroll"` to the `<body>` tag, along with `data-target=".navbar"` that references the element that you are spying on.

.Body Configuration for Scrollspy
[source, html]
----
<body data-spy="scroll" data-target=".navbar">...</body>
----

In the navbar, you will need to have page anchors that will serve as indicators for the element to spy on.

.Navbar Setup for Scrollspy
[source, html]
----
<div class="navbar">
	<div class="navbar-inner">
		<div class="container">
			<a class="brand" href="#">Jake's BBQ</a>
			<div class="nav-collapse">
				<ul class="nav">
					<li class="active"><a href="#">Home</a></li>
					<li><a href="#pork">Pork</a></li>
					<li><a href="#beef">Beef</a></li>
					<li><a href="#chicken">Chicken</a></li>
				</ul>
			</div><!-- /.nav-collapse -->
		</div>
	</div><!-- /navbar-inner -->
</div>
----

===== Usage via JavaScript

If you would rather invoke the scrollspy with Javascript, instead of using the data attributes, you can do so by selecting the element to spy on, and then envoking the `.scrollspy()` function.

.JavaScript Usage
[source, js]
----
$('#navbar').scrollspy()
----

==== Scrollspy Method

===== .scrollspy('refresh')

When calling the scrollspy via the JavaScript method, you will need to call the .refresh method to update the DOM. This is helpful if any elements of the DOM have changed.

[source, js]
----
$('[data-spy="scroll"]').each(function () {
	var $spy = $(this).scrollspy('refresh')
});
----

==== Option

Options can be passed via data attributes or JavaScript. For data attributes, append the option name to `data-`, as in `data-offset=""`.


.Scrollspy Option
[options="header"]
|=======================
|Name	|Type	|Default	|Description
|offset	|number	|10			|Pixels to offset from top of page when calculating position of scroll.
|=======================

The offset option is handy when you are using a fixed navbar. You will want to offset the scroll by about 50 pixels so that it reads at the correct time.

==== Events

.Scrollspy Event
[options="header"]
|=======================
|Event		|Description
|activate	|This event fires whenever a new item becomes activated by the scrollspy.
|=======================


=== Toggleable Tabs

That tabbable tabs were introduced back in chapter 3. Combing a few data attributes, you can easily create a tabbed interface. To do so, create the nav interface, and then wrap the content of the tabs inside a `<div>` with a class of `.tab-content`.

.Toggleable Tabs
image::images/boot_0403.png[]

.Basic Markup of Toggleable Tabs
[source, html]
----
<ul class="nav nav-tabs">
	<li><a href="#home" data-toggle="tab">Home</a></li>
	<li><a href="#profile" data-toggle="tab">Profile</a></li>
	<li><a href="#messages" data-toggle="tab">Messages</a></li>
	<li><a href="#settings" data-toggle="tab">Settings</a></li>
</ul>

<div class="tab-content">
	<div class="tab-pane active" id="home">...</div>
	<div class="tab-pane" id="profile">...</div>
	<div class="tab-pane" id="messages">...</div>
	<div class="tab-pane" id="settings">...</div>
</div>
----

==== Usage

To enable the tabs, you can use the Bootstrap Data API, or using JavaScript directly. With the Data API, you need to add `data-toggle` to the anchors. The anchor targets will activate the the element that has the `.tab-pane` class and relative ID. Alternatively, `data-target=""` may be used instead of `href="#"` to apply the same action.

.Enable Tabs via JavaScript
[source, js]
----
 $('#myTab a').click(function (e) {
	e.preventDefault();
	$(this).tab('show');
})
----

.Example of different ways to activate tabs
[source, js]
----
$('#myTab a[href="#profile"]').tab('show'); // Select tab by name
$('#myTab a:first').tab('show'); // Select first tab
$('#myTab a:last').tab('show'); // Select last tab
$('#myTab li:eq(2) a').tab('show'); // Select third tab (0-indexed)
----

==== Events

Tabs panes have two different events that can be hooked into.

.Toggleable Tab Events
[options="header"]
|=======================
|Event 	|Description
|show	|This event fires on tab show, but before the new tab has been shown. Use `event.target` and `event.relatedTarget` to target the active tab and the previous active tab (if available) respectively.
|shown 	|This event fires on tab show after a tab has been shown. Use `event.target` and `event.relatedTarget` to target the active tab and the previous active tab (if available) respectively.
|=======================

.Example of shown method
[source, js]
----
$('a[data-toggle="tab"]').on('shown', function (e) {
	e.target // activated tab
	e.relatedTarget // previous tab
})
----

For information about the jQuery `.on` method, read more at the jQuery website. http://api.jquery.com/on/[jQuery .on]

=== Tooltips

Tooltips are useful when you need to describe a link, or perphaps used in conjuction with the `<abbr>` tag, provide the defintion of an abbreviation. The plugin was originally based on the _jQuery.tipsy_ plugin written by Jason Frame. It has since been updated to work without images, animate with a CSS animation, and work with the Bootstrap JavaScript API.

.Tooltip Placement
image::images/boot_0404.png[]

==== Usage

To add a tooltip, add `rel="tooltip"` to an anchor tag. The title of the anchor will be the text of a tooltip.

.Bootstrap Data API
[source, js]
----
<a href="#" rel="tooltip" title="This is the tooltip">Tooltip Example</a>
----

.Javasscript
[source, js]
----
$('#example').tooltip(options)
----

==== Options

Like all of the plug-ins, there are options that can be added via the Bootstrap Data API, or invoked via JavaScript. All options need to have have `data-` appended to them. So, the `title` option would become `data-title`.

.Tooltip Options
[options="header"]
|=======================
|Name 		|Type 				|Default 	|Description
|animation 	|Boolean			|true		|Will apply a css fade transition to the tooltip.
|html 		|Boolean			|false		|Insert html into the tooltip. If false, jquery's `text` method will be used to insert content into the dom. Use text if you're worried about XSS attacks.
|placement	|string/function 	|\'top\'	|How to position the tooltip: top, bottom, left, or right.
|selector	|string				|false		|If a selector is provided, tooltip objects will be delegated to the specified targets.
|title		|string/function	|''			|The title option is the default title value if `title` attribute isn't present.
|trigger	|string				|\'hover\'	|The trigger option defines how the tooltip is triggered: click, hover, focus, or manualy.
|delay 		|number/object		|0 			|delay showing and hiding the tooltip (ms) - does not apply to manual trigger type If a number is supplied, delay is applied to both hide/show Object structure is: `delay: { show: 500, hide: 100 }`
|=======================


==== Methods

===== Options

Attaches a tooltip handler to an element collection.

[source, html]
----
$().tooltip(options)
----


===== Show

Reveals an element's tooltip.

[source, html]
----
$('#element').tooltip('show')
----

===== Hide

Hides an element's tooltip.

[source, js]
----
$('#element').tooltip('hide')
----

===== Toggle

Toggles an element's tooltip.

[source, js]
----
$('#element').tooltip('toggle')
----

===== Destroy

Hides and destroys an element's tooltip.

[source, js]
----
$('#element').tooltip('destroy')
----

=== Popover

The popover is a sibling of the tooltip, offering an entended view, complete with a heading. For the popver to activate, a person just needs to hover over the element. The content of the popver can be populated entirely using the Bootstrap Data API. This method required tooltip.

.Popover Placement
image::images/boot_0405.png[]

[source, html]
----
<a href="#" class="btn" rel="popover" title="Using Popover" data-content="Just add content to the data-content attribute.">Click Me!</a>
----


==== Usage

To enable the popover with JavaScript, use the `.popover()` function, passing in any options that you might need.

[source, js]
----
$('#example').popover(options)
----

==== Options

All options can be passed via the Boostrap Data API, or directly with JavaScript.

++++
<informaltable class="table table-bordered table-striped">
  <thead>
   <tr>
     <th style="width: 100px;">Name</th>
     <th style="width: 100px;">Type</th>
     <th style="width: 50px;">Default</th>
     <th>Description</th>
   </tr>
  </thead>
  <tbody>
   <tr>
     <td>animation</td>
     <td>Boolean</td>
     <td>true</td>
     <td>apply a css fade transition to the tooltip</td>
   </tr>
   <tr>
     <td>html</td>
     <td>Boolean</td>
     <td>false</td>
     <td>Insert html into the popover. If false, jquery's <code>text</code> method will be used to insert content into the dom. Use text if you're worried about XSS attacks.</td>
   </tr>
   <tr>
     <td>placement</td>
     <td>string | function</td>
     <td>'right'</td>
     <td>how to position the popover - top | bottom | left | right</td>
   </tr>
   <tr>
     <td>selector</td>
     <td>string</td>
     <td>false</td>
     <td>if a selector is provided, tooltip objects will be delegated to the specified targets</td>
   </tr>
   <tr>
     <td>trigger</td>
     <td>string</td>
     <td>'click'</td>
     <td>how popover is triggered - click | hover | focus | manual</td>
   </tr>
   <tr>
     <td>title</td>
     <td>string | function</td>
     <td>''</td>
     <td>default title value if `title` attribute isn't present</td>
   </tr>
   <tr>
     <td>content</td>
     <td>string | function</td>
     <td>''</td>
     <td>default content value if `data-content` attribute isn't present</td>
   </tr>
   <tr>
     <td>delay</td>
     <td>number | object</td>
     <td>0</td>
     <td>
      The delay showing and hiding the popover (ms) - does not apply to manual trigger type.
      If a number is supplied, delay is applied to both hide/show.
      Object structure is: <code>delay: { show: 500, hide: 100 }</code>
     </td>
   </tr>
  </tbody>
</informaltable>
++++

==== Methods

===== Options

Initializes popovers for an element collection.

[source, js]
----
$().popover(options)
----

===== Show

Reveals an elements popover.

[source, js]
----
$('#element').popover('show')
----

===== Hide

Hides an elements popover.

[source, js]
----
$('#element').popover('hide')
----

===== Toggle

Toggles an elements popover.

[source, js]
----
$('#element').popover('toggle')
----

===== Destroy

Hides and destroys an element's popover.

[source, js]
----
$('#element').popover('destroy')
----

=== Alerts

With the Data APi, it is easy to add dismiss functionality to alert messages.

.Error Alert Message
image::images/boot_04in02.png[]

==== Usage

To close an alery, you can either do it manually with the Javascript `.alert()` method or use data attributes in conjunction with an anchor or button.

.Dismiss Via JavaScript
[source, js]
----
$(".alert").alert()
----

.Dismiss Via Data API
[source, js]
----
<a class="close" data-dismiss="alert" href="#">&times;</a>
----

==== Close Method

To enable all alerts to be ale to be closed, add the following method. To enable alerts to animate out when closed, make sure they have the `.fade` and `.in` class already applied to them.

[source, html]
----
$(".alert").alert('close')
----

==== Events

There are two event that can be tied to Bootstrap's alert class.

[options="header"]
|=======================
|Event 	|Description
|close	|This event fires immediately when the close instance method is called.
|closed	|This event is fired when the alert has been closed (will wait for css transitions to complete).
|=======================

As an example, if you wanted to trigger a function after an alert has closed, you could use the following function.

[source, js]
----
$('#my-alert').bind('closed', function () {
  // do something…
})
----

=== Buttons

Buttons were introduced in chapter 3, and you don't need to do anything to make them work as links, and as buttons in forms. There is some additional interaction that you can add with the plugin, notably loading states, and adding toolbar like functionality to button groups.

==== Loading State

To add a loading state to a button, simply add `data-loading-text="Loading..."` as an attribute to the button. When the button is clicked, the `.disabled` class is added, giving the apearence that it can no longer be clicked.

.Loading Button
image::images/boot_0406.png[]

[source, html]
----
<button type="button" class="btn btn-primary" data-loading-text="Loading...">Submit!</button>
----

==== Single Toggle

When clicking on a button with the `data-toggle="button"` attribute, a class of `.active` is added.

.Toggle Button
image::images/boot_0407.png[]

[source, html]
----
<button type="button" class="btn btn-primary" data-toggle="button">Toggle</button>
----

==== Checkbox Buttons

Buttons can work like checkboxes, where you can select many of the options in a button group. To add this function, add `data-toggle="buttons-checkbox"` for checkbox style toggling on `btn-group`.

.Checkbox Buttons
image::images/boot_0408.png[]

[source, html]
----
<div class="btn-group" data-toggle="buttons-checkbox">
  <button type="button" class="btn btn-primary">Left</button>
  <button type="button" class="btn btn-primary">Middle</button>
  <button type="button" class="btn btn-primary">Right</button>
</div>
----

==== Radio Buttons

Radio buttons function similarily to checkboxes, the primary difference is that a radio button doesn't allow for multiple selections, only one button in the group can be selected. To add this function, add `data-toggle="buttons-radio"` for radio style toggling on `btn-group`.

.Radio Buttons
image::images/boot_0409.png[]

[source, html]
----
<div class="btn-group" data-toggle="buttons-radio">
  <button type="button" class="btn btn-primary">Left</button>
  <button type="button" class="btn btn-primary">Middle</button>
  <button type="button" class="btn btn-primary">Right</button>
</div>
----

==== Usage

The `.button` method can be applied to any class or ID that you want. To enable all buttons in the `.nav-tabs` via JavaScript, add this code:

[source, js]
----
$('.nav-tabs').button()
----

==== Methods

===== Toggle

Toggles push state. Gives the button the appearance that it has been activated.

[source, js]
----
$().button('toggle')
----

===== Loading

When loading, the button is disabled and the text is changed to the option from `data-loading-text` attribute.

[source, html]
----
<button type="button" class="btn" data-loading-text="loading stuff..." >...</button>
----

===== Reset

Resets button state, bringing the original content back to the text. Useful when you need to return the button back to the primary state.

[source, js]
----
$().button('reset')
----

===== String

String in this method is referring to any string decalred by the user.

[source, js]
----
$().button('string')
----

To reset the button state, and bring in new content, use the string method.

[source, html]
----
<button type="button" class="btn" data-complete-text="finished!" >...</button>

<script>
  $('.btn').button('complete')
</script>
----

=== Collapse

The collapse plugin makes it easy to make collapsing divisions of the page. Whether you use it to build accordian naviation or content boxes, it allows for a lot of content options.

.Example Accordian
image::images/boot_0410.png[]

.Accordian Code
[source, html]
----
<div class="accordion" id="accordion2">
  <div class="accordion-group">
    <div class="accordion-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseOne">
        Collapsible Group Item #1
      </a>
    </div>
    <div id="collapseOne" class="accordion-body collapse in">
      <div class="accordion-inner">
        Anim pariatur cliche...
      </div>
    </div>
  </div>
  <div class="accordion-group">
    <div class="accordion-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseTwo">
        Collapsible Group Item #2
      </a>
    </div>
    <div id="collapseTwo" class="accordion-body collapse">
      <div class="accordion-inner">
        Anim pariatur cliche...
      </div>
    </div>
  </div>
</div>
...
----

You can also use the data attributes to make all content collapsable.

[source, html]
----
<button type="button" class="btn btn-danger" data-toggle="collapse" data-target="#demo">
  simple collapsible
</button>

<div id="demo" class="collapse in"> … </div>
----

==== Usage

===== Via Data Attributes

Like all of the plug-ins that use the data API, you can add all needed markup without writing any JavaScript. Add `data-toggle="collapse"` and a `data-target` to the element to automatically assign control of a collapsible element. The `data-target` attribute will accept a css selector to apply the collapse to. Be sure to add the class `.collapse` to the collapsible element. If you'd like it to default open, add the additional class `.in`.

To add accordion-like group management to a collapsible control, add the data attribute `data-parent="#selector"`.

===== Via JavaScript

The collapse method can activated with Javascript too. 

[source, js]
----
$(".collapse").collapse()
----

==== Options

Options can be passed via data attributes, or with JavaScript.

.Collapse Options
[options="header"]
|=======================
|Name	|type		|default	|description
|parent	|selector	|false		|If selector then all collapsible elements under the specified parent will be closed when this collapsible item is shown. (similar to traditional accordion behavior)
|toggle	|Boolean	|true		|Toggles the collapsible element on invocation
|=======================

==== Methods

===== Options

Activates your content as a collapsible element. Accepts an optional options object.

[source, js]
----
.collapse(options)
----

===== Toggle

Toggles a collapsible element to shown or hidden.

[source, js]
----
$('#myCollapsible').collapse({
  toggle: false
})
.collapse('toggle')
----

===== Show

Shows a collapsible element.

[source, js]
----
.collapse('show')
----

===== Hide

Hides a collapsible element.

[source, js]
----
.collapse('hide')
----

==== Events

There are four events that can be hooked into with the collapse plugin.

.Collapse Events
[options="header"]
|=======================
|Event	|Description
|show	|This event fires immediately when the `show` instance method is called.
|shown	|This event is fired when a collapse element has been made visible to the user (will wait for css transitions to complete).
|hide	| This event is fired immediately when the `hide` method has been called.
|hidden	|This event is fired when a collapse element has been hidden from the user (will wait for css transitions to complete).
|=======================

After a `<div>` has been collapsed, you could use the following code to execute a function.

[source, js]
----
$('#myCollapsible').on('hidden', function () {
  // do something…
})
----

=== Carousel

The Bootstrap carousel is a flexible, responsive way to add a slider to your site. In addiotn to being responsive, the content is flexible enough to allow images, iframes, video, or likely anytime of content that you might want.

.Carousel Example
image::images/boot_0411.png[]

.Carousel Code Example
[source, html]
----
<div id="myCarousel" class="carousel slide">
  <!-- Carousel items -->
  <div class="carousel-inner">
    <div class="active item">…</div>
    <div class="item">…</div>
    <div class="item">…</div>
  </div>
  <!-- Carousel nav -->
  <a class="carousel-control left" href="#myCarousel" data-slide="prev">&lsaquo;</a>
  <a class="carousel-control right" href="#myCarousel" data-slide="next">&rsaquo;</a>
</div>
----

==== Usage

To implement the carousel, you just need to add the code with the markup above. No need for data atrributes, just simple class based development. To call the carousel with JavaScript, you can do it manually with the following code:

[source, js]
----
$('.carousel').carousel()
----

==== Options

Options can be passed through data attributes, or through JavaScript.

.Carousel Options
[options="header"]
|=======================
|Name		|Type	|Default	|Description
|interval	|number	|5000		|The amount of time to delay between automatically cycling an item. If false, carousel will not automatically cycle.
|pause		|string	|"hover"	|Pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on mouseleave.
|=======================


==== Methods

===== Options

Initializes the carousel with an optional `options` object and starts cycling through items.

[source, js]
----
$('.carousel').carousel({
  interval: 2000
})
----

===== Cycle

Cycles through the carousel items from left to right.

[source, js]
----
.carousel('cycle')
----

===== Pause

Stops the carousel from cycling through items.

[source, js]
----
.carousel('pause')
----

===== Number

Cycles the carousel to a particular frame (0 based, similar to an array).

[source, js]
----
.carousel(number)
----

===== Prev

Cycles to the previous item.

[source, js]
----
.carousel('prev')
----

===== Next

Cycles to the next item.

[source, js]
----
.carousel('next')
----


==== Events

The carousel has two events that can be hooked into, the `slide`, and `slid` events.

.Carousel Events
[options="header"]
|=======================
|Event 	|Description
|slide 	|This event fires immediately when the slide instance method is invoked.
|slid 	|This event is fired when the carousel has completed its slide transition.
|=======================

=== Typeahead

Typeahead allows you to easily create typeahead inputs in forms. Example, you could preload states in a state field, or using some JavaScript, get search results using some AJAX calls.

.Typeahead Example
image::images/boot_0412.png[]

==== Usage

Using data API, you can add sources via the `data-source` attribute. Items should be listed in either a JSON array, or a function.

.Typeahead Code Example
[source, html]
----
<input
	type="text"
	class="span3"
	data-provide="typeahead"
	data-items="4"
	data-source="[
		'Alabama',
		'Alaska',
		'Arizona',
		'Arkansas',
		'California',
		...
		]"
>
----

To call directly with JavaScript, use the following method.

.Javscipt Method
[source, js]
----
$('.typeahead').typeahead()
----

==== Options

.Carousel Options
[options="header"]
|===========================
|Name       |Type           |Default                                      |Description
|source     |array, function|[ ]                                          |The data source to query against. May be an array of strings or a function. The function is passed through two arguments, the `query` value in the input field and the `process` callback. The function may be used synchronously by returning the data source directly or asynchronously via the `process` callback's single argument.
|items      |number         |8                                            |The max number of items to display in the dropdown.
|minLength  |number         |1                                            |The minimum character length needed before triggering autocomplete suggestions
|matcher    |function       |case insensitive                             |The method used to determine if a query matches an item. Accepts a single argument, the item against which to test the query. Access the current query with `this.query`. Return a Boolean true if query is a match.
|sorter     |function       |exact match, case sensitive, case insensitive|Method used to sort autocomplete results. Accepts a single argument items and has the scope of the typeahead instance. Reference the current query with `this.query`.
|updater    |function       |returns selected item                        |The method used to return selected item. Accepts a single argument, the item and has the scope of the typeahead instance.
|highlighter|function       |highlights all default matches               |Method used to highlight autocomplete results. Accepts a single argument item and has the scope of the typeahead instance. Should return html.
|===========================


=== Affix

The affix plugin allows you to allow a `<div>` to become affixed to a location on the page. A common example of this is social icons on a page. They will start in a location, but as the page hits a certain mark, the `<div>` will become locked in place and will stop scrolling with the rest of the page.

==== Usage

To apply the affix plugin to a `<div>`, you can use either data attributes, or use JavaScript directly. Of note, you must position the element so that it can be affixed to the page. Position is controlled by the `data-spy` attribute, using either  `affix`, `affix-top`, or `affix-bottom`. You then use the `data-offset` to calcualte the position of the scroll.

[source, html]
----
<div data-spy="affix" data-offset-top="200">
	...
</div>
----

==== Option

[options="header"]
|===========================
|Name	|type						|default	|description
|offset	|number/function/object		|10			|Pixels to offset from screen when calculating position of scroll. If a single number is provided, the offset will be applied in both top and left directions. To listen for a single direction, or multiple unique offsets, just provide an object `offset: { x: 10 }`. Use a function when you need to dynamically provide an offset (useful for some responsive designs).
|===========================
