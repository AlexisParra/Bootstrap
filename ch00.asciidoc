[preface]
[[PREFACE]]
Preface
-------

Bootstrap is a front-end framework for building responsive websites. Whether it is application frameworks, blogs, or other CMS applications, Bootstrap can be a good fit as it can be as vanilla as you like. It's combination of HTML, CSS, and Javascript make it easy to build robust sites, without adding a lot of code. With a default grid system, layouts come together with ease, and the styling of buttons, navs, and tables make basic markup look great from the get go. A dozen or so Javascript plugins catapult you into adding interactive elements to your site.


Who This Book is For
~~~~~~~~~~~~~~~~~~~~

This books is mostly for people that have a good handle on HTML/CSS and Javascript, and are curious to get started with building responsive sites, adding the Bootstrap Javascript plugins, or building sites faster by using this popular open-source framework.


Who This Book is Not For
~~~~~~~~~~~~~~~~~~~~~~~~

This book is not for people that get all they need out of the Bootstrap online documentation. Like a lot of people, the online docs are where I got started, building my first site with Bootstrap 1.3, and then upgrading it to Bootstrap 1.4. After that, a big project was built with Bootstrap 2.0 and on. If you are comfortable writing semantic HTML, then jumping into Bootstrap should be easy for you to get started with.

What This Book Will Do For You
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With some background in writing HTML/CSS, and Javascript, this book will help you get off the ground writing some flexible code for responsive websites. In practical terms, the concepts and code sntax should come easily as it follows the patterns for writing coode code anyways. 


How This Book Works
~~~~~~~~~~~~~~~~~~~

This book tries to built a site with Bootstrap, starting at the foundation of the project, the file structure, moving up through the grid system, and layout types into HTML elements and styling like forms, tables, and buttons. Once the walls are up, we move into the aesthetic elements like navbars, breadcrumbs, and media objects. After that, into the Javascript elements that provide the interaction for a site like dropdowns, the carousel, and modals.


Why I Wrote This Book
~~~~~~~~~~~~~~~~~~~~~

I'm not an Bootstrap expert hoping to create more Bootstrap experts to get a lot of work done.  

I'm a developer and writer who encountered Bootstrap through a post on Dave Winer's blog, and I thought that it would be cool to apply it to a new site that I was working on and since felt compelled to share some of that. I'm hoping that the path I followed will work for other people, probably with variations, and that a book written from a beginner's perspective (and vetted by experts) would help more people find and enjoy Bootstrap.


Other Resources
~~~~~~~~~~~~~~~

This book may not be the best way for you to learn Bootstrap.  It all depends on what you want to learn and why.  

If your primary interest is to get started building Bootstrap websites, the online documentation at http://twitter.github.com/bootstrap/ may likely suit you perfectly. The authors, Jacob Thornton and Mark Otto have been meticulous in providing examples of the codebase, and HTML code samples, and more to kick start your project. It is top notch, and where I have gathered the structure for this book. 

If you want to contribute to the work of the open source project, you can submit pull requests, or use the issue tracker on the Github project, http://github.com/twitter/bootstrap/, for updates, downloads, documentation, and more.

Are You Sure You Want Erlang?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Though they've been obscure for a long time, there's a crowd of functional languages rising into greater popularity.

Three of them in particular - Clojure, F#, and Haskell - may be more appealing than Erlang if you have specific needs.  

* Clojure runs on the Java Virtual Machine (JVM), making it insanely portable, and has access to Java libraries as a result.  ClojureScript does the same with JavaScript, too. (Erjang makes it possible to run Erlang on the JVM, but it's not a core part of the language.) 

* F# runs on the .NET Common Language Runtime (CLR), making it very portable in the Microsoft ecosystem, and again, has access to .NET libraries.

* Haskell doesn't run on a virtual machine, but also offers a stronger type system and a different kind of discipline (and laziness).

Personally, I got my start with these concepts in XSLT.  It's a very different kind of language, meant for a specific domain of document transformation, but many of the same ideas flow through it.

You don't, of course, have to decide if Erlang is your life's dream now.  You can learn concepts in Erlang and apply them elsewhere if it turns out to be a better idea for your work.

Erlang Will Change You
~~~~~~~~~~~~~~~~~~~~~~

Before you go deeper, you should know that working in Erlang may change, irrevocably, the way you look at programs.  Its combination of functional code, process-orientation, and distributed development may seem alien at first.  However, once it sinks in, Erlang can transform the way you solve problems, and potentially make it difficult to return to other languages, environments, and programming cultures.

Conventions Used in This Book
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following typographical conventions are used in this book:

_Italic_:: Indicates new terms, URLs, email addresses, filenames, and file extensions.

+Constant width+:: Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, statements, and keywords.

**`Constant width bold`**:: Shows commands or other text that should be typed literally by the user.

_++Constant width italic++_:: Shows text that should be replaced with user-supplied values or by values determined by context.

NOTE: This icon signifies a tip, suggestion, or general note.


WARNING: This icon indicates a warning or caution.


A Note on Erlang Syntax
~~~~~~~~~~~~~~~~~~~~~~~

Erlang's syntax seems to be a sticking point for a lot of people.  It doesn't look like the C family of languages.  Punctuation is different and capitalization matters.  Periods even get used as conclusions rather than connectors!

To me, Erlang syntax mostly feels natural, and I'm especially happy that it's different from the other languages I typically use.  I make a lot fewer mix-ups that way.

Rather than dwell on syntax, I've chosen just to present it as it is.  Comparing it to other languages doesn't seem likely to be helpful, especially when different readers may come from different programming backgrounds.  Hopefully you will find Erlang syntax as pleasant as I do.

Examples
~~~~~~~~

The examples in this book are meant to teach basic concepts in small bites.  While you may certainly borrow code and reuse it as you see fit, you won't be able to take the code of this book and build a stupendous application instantly (unless perhaps you have an unusual fondness for calculating the speeds of falling objects).  You should, however, be able to figure out the steps you need to take to build a great application.

You can download the code from the Examples link on the book's page at http://shop.oreilly.com/product/0636920025818.do .

This book is here to help you get your job done. In general, you may use the code in this book in your programs and documentation. You do not need to contact us for permission unless you are reproducing a significant portion of the code. For example, writing a program that uses several chunks of code from this book does not require permission. Selling or distributing a CD-ROM of examples from O'Reilly books does require permission. Answering a question by citing this book and quoting example code does not require permission. Incorporating a significant amount of example code from this book into your product's documentation does require permission.

We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher, and ISBN. For example: "_Introducing Erlang_, by Simon St.Laurent (O'Reilly). Copyright 2012 Simon St.Laurent, 9781449331764."  

If you feel your use of code examples falls outside fair use or the permission given above, feel free to contact us at pass:[<email>permissions@oreilly.com</email>].

Help This Book Grow
~~~~~~~~~~~~~~~~~~~

While I hope that you will enjoy reading this book and learn from it, I also hope that you can contribute to helping other readers learn Erlang here.  You can help your fellow readers in a number of ways:

* If you find specific technical problems, bad explanations, or things that can be improved, please report them through the errata system at http://oreilly.com/catalog/errata.csp?isbn=0636920025818.

* If you like (or don't like) the book, please leave reviews.  The most visible places to do so are on Amazon.com (or its international sites) and at the O'Reilly page for the book at http://shop.oreilly.com/product/0636920025818.do.  Detailed explanations of what worked and what didn't work for you (and the broader target audience of programmers new to Erlang) are helpful to other readers and to me.

* If you find you have much more you want to say about Erlang, please consider sharing it, whether on the Web, in a book of your own, in training classes, or in whatever form you find easiest.

I'll update the book for errata, and try to address issues raised in reviews. Even once the book is 'complete', I may still add some extra pieces to it.  If you purchased it as an ebook, you'll receive these updates for free at least up to the point where it's time for a whole new edition.  I don't expect that new edition declaration to come quickly, however, unless the Erlang world changes substantially.

Hopefully this book will engage you enough to make you consider sharing.

Please Use It For Good
~~~~~~~~~~~~~~~~~~~~~~

I'll let you determine what "good" means, but think about it.  Please try to use Erlang's power for projects that make the world a better place, or at least not a worse place.

Acknowledgments
~~~~~~~~~~~~~~~

Many thanks to Zachary Kessin for interesting me in Erlang in the first place, and to him and Francesco Cesarini for encouraging me to write this.  Detailed feedback from Steve Vinoski and Fred Hebert has made it possible, I hope, for this book to get readers started on the right track.  J. David Eisenberg and Chuck Ha helped make it especially possible for beginners to get started right, pointing out gaps and issues in my prose.

In particular, thanks to my wife Angelika for encouraging me to finish this, to my son Konrad for not throwing the printouts around too much, and to my daughter Sungiva for understanding that I needed to go back downstairs after I told her her story about Ned and Ernie, adventuring snakes, for the night.