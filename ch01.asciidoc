== Scaffolding

Starting a project new, Bootstrap comes comes with a handful of useful elements to get you started. Normally, when I start a project, I start with tools like http://meyerweb.com/eric/tools/css/reset/[Eric Meyer's CSS reset], and get going on my web project. With Bootstrap, you just need to include the CSS file, and optionally the Javascript file and you are ready to go. First off, there are few thing that you need to do get started.

=== Bootstrap File Structure

----
 bootstrap/
	├── css/
	│   ├── bootstrap.css
	│   ├── bootstrap.min.css
	├── js/
	│   ├── bootstrap.js
	│   ├── bootstrap.min.js
	├── img/
	│   ├── glyphicons-halflings.png
	│   ├── glyphicons-halflings-white.png
	└── README.md
----

The Bootstrap download includes three folders: css, js, and img. For simplicity, add these to the root of your project. Included are also minified versions of the CSS and Javascript. Both the uncompressed and the minified versions do not need to be included. For the sake of brevity, I use the uncompressed during development, and then switch to the compressed version in production.

=== Basic HTML Template

Normally, a web project looks something like this:

.Basic HTML Layout
[source,html]
-------------
<html>
	<head>
		<title>Bootstrap 101 Template</title>
	</head>
	<body>
		<h1>Hello, world!</h1>
	</body>
</html>
-------------

With Bootstrap, we simply include the link to the stylesheet, and the Javascript.

.Basic Bootstrap Template
[source, html]
--------------
<!DOCTYPE html>
<html>
	<head>
		<title>Bootstrap 101 Template</title>
		<!-- Bootstrap -->
		<link href="css/bootstrap.min.css" rel="stylesheet">
	</head>
	<body>
		<h1>Hello, world!</h1>
		<script src="js/bootstrap.min.js"></script>
	</body>
</html>
--------------

[NOTE]
===============================
*NOTE* Don't forget the HTML 5 Doctype
===============================

=== Global Styles

With Bootstrap, a number of the items come prebuilt. Instead of using the old reset block that was part of the Bootstrap 1.0 tree, Bootstrap 2.0 uses http://necolas.github.com/normalize.css/[Normalize.css], a project from http://necolas.github.com/normalize.css/[Nicolas Gallagher] that is part of the HTML5 Boilerplate.

Typography and links are given a special treatment here. 

* `margin` has been removed from the body
* `background-color: white;` on the body
* Bootstrap is using the `@baseFontFamily, @baseFontSize, and @baseLineHeight` attributes as our typographic base
* Also set the global link color via `@linkColor` and apply link underlines only on :hover

[NOTE]
====
Remember, if you don't like the colors, or want to change a default, this can be done in the scaffolding.less file, or overwritten in the users stylesheet. 
====

=== Default Grid System

The default Bootstrap grid system utilizes 12 columns, making for a 940px wide container without responsive features enabled. With the responsive CSS file added, the grid adapts to be 724px and 1170px wide depending on your viewport. Below 767px viewports, the columns become fluid and stack vertically. At the default width, each column is 60 pixels wide, offset 20 pixels to the left. 

.Default Grid
image::images/grid.png[]

==== Basic grid HTML

To create a simple layout, create a '.row', and add the appropriate amount of '.span*' columns. Since we have 12-column grid, we just need to have the amount of '.span*' columns add up to twelve. We could use a 3-6-3 layout, 4-8, 3-5-4, 2-8-2, we could go on and on, but I think you get the gist.


.Basic Grid Layout
[source, html]
--------------

<div class="row">
  <div class="span8">...</div>
  <div class="span4">...</div>
</div>
---------------

In the above example, we have '.span8', and a '.span4' adding up to 12.

==== Offsetting Columns

You can move columns to the right using the '.offset*' class. Each class moves the span over that width. So an '.offset4' would move a '.span4' over four columns. 

.Offsetting Columns
[source, html]
------------------
<div class="row">
  <div class="span2">...</div>
  <div class="span7 offset2">...</div>
</div>
------------------

.Offset Grid
image::images/offset-grid.png[]

==== Nesting columns

To nest your content with the default grid, simply inside of a '.span*', add a new '.row' with enough '.span*' that add up the number of the parent. 

.Nesting Columns
[source, html]
--------------
<div class="row">
  <div class="span9">
    Level 1 column
    <div class="row">
      <div class="span6">Level 2</div>
      <div class="span3">Level 2</div>
    </div>
  </div>
</div>
--------------

.Nesting Grid
image::images/offset-grid.png[]


=== Fluid Grid System

The fluid grid system uses percents instead of pixels for column widths. It has the same responsive capabilities as our fixed grid system, ensuring proper proportions for key screen resolutions and devices. You can make any row "fluid" by changing .row to .row-fluid. The column classes stay the exact same, making it easy to flip between fixed and fluid grids. To offset, you operate in the same way as the fixed grid system works by adding .offset* to any column to offset by that many columns.

.Fluid Column Layout
[source, html]
--------------
<div class="row-fluid">
  <div class="span4">...</div>
  <div class="span8">...</div>
</div>

<div class="row-fluid">
  <div class="span4">...</div>
  <div class="span4 offset2">...</div>
</div>
--------------

Nesting a fluid grid is a little different. Since we are using percentages, each '.row' resets the count. For example, If you were inside a '.span8', instead of two '.span4' elements to divide the content in half, you would use two '.span6' divs. 

.Nesting Fluid Column Layout
[source, html]
--------------
<div class="row-fluid">
  <div class="span8">
		<div class="row">
		  <div class="span6">...</div>
		  <div class="span6">...</div>
		</div>
  </div>
</div>
--------------

.Nesting Fluid Grid
image::images/nesting-grid.png[]

=== Container Layouts

To add a fixed width, centered layout to your page, simply wrap the content in '<div class="conainer">...</div>'. If you would like to use a fluid layout, but want to wrap everything in a container, use the following: '<div class="container-fluid">...</div>'. Using a fluid layout is great when you are building applications, administration screens and other related projects.

=== Responsive Design

To turn on the responsive features of Bootstrap, you need to add a meta tag to the '<head>' of your webpage. If you haven't downloaded the compiled source, you will also need to add the responsive CSS file.

.Responsive Meta Tag and CSS
[source, html]
--------------
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link href="/css/bootstrap-responsive.css" rel="stylesheet">
--------------

[NOTE]
===============================
*Heads up!* If you get started and are finding that the Bootstrap responsive features aren't working, make sure that you have these tags. The responsive features  aren't added by default at this time because not everything needs to be responsive. Instead of encouraging developers to remove this feature, the authors opted that it was best to enable it as needed.
===============================

==== What is Responsive Design?

Responsive design is a method for taking all of the existing content that is on the page, and optimizing it for the device that is viewing it. For example, the desktop not only gets the normal version of the website, but might get also get a widescreen layout, optimized for the larger displays that many people have attached to their computers. Tablets get an optimized layout, taking advantage of the portrait or landscape layouts of those devices. And then with phones, you can target the much narrower width of phones. To target these different widths, Bootstrap uses CSS media queries to measure the width of the browser viewport, and then using conditionals, change which parts of the stylesheets are loaded. Using the width of the browser viewport, Bootstrap can then optimize the content using a combination of ratios, widths, but mostly falls on 'min-width' and 'max-width'.