== Scaffolding

Starting a project new, Bootstrap comes comes with a handful of useful elements to get you started. Normally, when I start a project, I start with tools like http://meyerweb.com/eric/tools/css/reset/[Eric Meyer's CSS reset], and get going on my web project. With Bootstrap, you just need to include the CSS file, and optionally the Javascript file and you are ready to go. First off, there are few things that you need to do get started.

// "the CSS file, and optionally the Javascript file" is a little confusing right off the bat, though you do explain it a bit later. I wasn't sure if this was something I should make and add, or default files that come with bootstrap. Maybe just add a few words to make it a tiny bit clearer? -NM

=== Bootstrap File Structure

----
 bootstrap/
	├── css/
	│   ├── bootstrap.css
	│   ├── bootstrap.min.css
	├── js/
	│   ├── bootstrap.js
	│   ├── bootstrap.min.js
	├── img/
	│   ├── glyphicons-halflings.png
	│   ├── glyphicons-halflings-white.png
	└── README.md
----

The Bootstrap download includes three folders: css, js, and img. For simplicity, add these to the root of your project. Included are also minified versions of the CSS and Javascript. Both the uncompressed and the minified versions do not need to be included. For the sake of brevity, I use the uncompressed during development, and then switch to the compressed version in production.

// It might be cool to have a little screencast here, where you start up a new bootstrap project, and just show a finder window where you walk through the file structure and defaults. -NM

=== Basic HTML Template

Normally, a web project looks something like this:

.Basic HTML Layout
[source,html]
-------------
<html>
	<head>
		<title>Bootstrap 101 Template</title>
	</head>
	<body>
		<h1>Hello, world!</h1>
	</body>
</html>
-------------

With Bootstrap, we simply include the link to the CSS stylesheet, and the Javascript.

.Basic Bootstrap Template
[source, html]
--------------
<!DOCTYPE html>
<html>
	<head>
		<title>Bootstrap 101 Template</title>
		<!-- Bootstrap -->
		<link href="css/bootstrap.min.css" rel="stylesheet">
	</head>
	<body>
		<h1>Hello, world!</h1>
		<script src="js/bootstrap.min.js"></script>
	</body>
</html>
--------------

[NOTE]
===============================
*NOTE* Don't forget the HTML 5 Doctype
===============================

// Is it important that the Javascript is included in the body, instead of in the head? Also is that Bootstrap comment in the head important? -NM

=== Global Styles

With Bootstrap, a number of items come prebuilt. Instead of using the old reset block that was part of the Bootstrap 1.0 tree, Bootstrap 2.0 uses http://necolas.github.com/normalize.css/[Normalize.css], a project from http://necolas.github.com/normalize.css/[Nicolas Gallagher] that is part of the HTML5 Boilerplate.

// Is this all in the file that's included in the css folder by default? -NM

In particular, these default styles give special treatment to typography and links. 

* `margin` has been removed from the body
* `background-color: white;` is applied to the body
* Bootstrap is using the `@baseFontFamily, @baseFontSize, and @baseLineHeight` attributes as our typographic base
* Bootstrap sets the global link color via `@linkColor` and applies link underlines only on :hover

// re: margin: does this mean the body content bleeds all the way to the edge of the window? -NM

// re: typographic base: do you expand on this later in the book, and if so, can we add a cross reference to that section? If not, maybe add some external links or a sentence or two explaining what this is. -NM

// This could be a great place for a video where you walk through these changes, and show what effect they have on the resulting website. -NM

[NOTE]
====
Remember, if you don't like the colors, or want to change a default, this can be done in the scaffolding.less file, or overwritten in the users stylesheet. 
====

// what is the scaffolding .less file, and what is the users stylesheet? is that different than the default stylesheet? -NM

=== Default Grid System

The default Bootstrap grid system utilizes 12 columns, making for a 940px wide container without responsive features enabled. With the responsive CSS file added, the grid adapts to be 724px and 1170px wide depending on your viewport. Below 767px viewports, the columns become fluid and stack vertically. At the default width, each column is 60 pixels wide, offset 20 pixels to the left. 

// I think this would be a great place for a jsfiddle, showing a resizable frame using the responsive grid that users can resize and see change. Basically, just an embedded responsive frame. Fallback for print, epub, etc, would be an image showing both default grid and responsive grid. -NM

.Default Grid
image::images/grid.png[]

==== Basic grid HTML

To create a simple layout, create a '.row', and add the appropriate amount of '.span*' columns. Since we have 12-column grid, we just need to have the amount of '.span*' columns add up to twelve. We could use a 3-6-3 layout, 4-8, 3-5-4, 2-8-2, we could go on and on, but I think you get the gist.


.Basic Grid Layout
[source, html]
--------------

<div class="row">
  <div class="span8">...</div>
  <div class="span4">...</div>
</div>
---------------

In the above example, we have '.span8', and a '.span4' adding up to 12.

// I'm not sure if this is feasible yet, but it would be cool to have an interactive frame where readers could try different combinations of span numbers and see the effect. Maybe even just a very short video where you walk through a few different combinations, showing the code as well, with a fallback image that compares a few combinations side by side. -NM

// Starting work on this. 

jsfiddle::http://jsfiddle.net/whyisjake/b3X7n/embedded/result/[width="100%", height="300px"]


==== Offsetting Columns

You can move columns to the right using the '.offset*' class. Each class moves the span over that width. So an '.offset4' would move a '.span4' over four columns. 

.Offsetting Columns
[source, html]
------------------
<div class="row">
  <div class="span2">...</div>
  <div class="span7 offset2">...</div>
</div>
------------------

.Offset Grid
image::images/offset-grid.png[]

==== Nesting columns

To nest your content with the default grid, simply inside of a '.span*', add a new '.row' with enough '.span*' that add up the number of the parent.

// Could be a good place for a challenge/solution. "Given a parent span9, what values could you use in the child row?". Prepopulate the box with everything but the child span*'s, and then the pop-out solution would show the following code. -NM

So, let's say that you have a two columns layout, with a span8, and a span4, and you want to embed a two column layout inside of the layout, what spans would you use? For a four column layout?

// Nellie, what is the format for somthing like this? Just a normal paragraph? 



.Nesting Columns
[source, html]
--------------
<div class="row">
  <div class="span9">
    Level 1 column
    <div class="row">
      <div class="span6">Level 2</div>
      <div class="span3">Level 2</div>
    </div>
  </div>
</div>
--------------

.Nesting Grid
image::images/nesting-grid.png[]

jsfiddle::http://jsfiddle.net/whyisjake/EEWQ2/embedded/result/[width="100%", height="300px"]


=== Fluid Grid System

The fluid grid system uses percents instead of pixels for column widths. It has the same responsive capabilities as our fixed grid system, ensuring proper proportions for key screen resolutions and devices. You can make any row "fluid" by changing .row to .row-fluid. The column classes stay the exact same, making it easy to flip between fixed and fluid grids. To offset, you operate in the same way as the fixed grid system works by adding .offset* to any column to offset by that many columns.

// I'd love to see some kind of demo of how changing from fixed to fluid changes the display of the website. Could be a video or a couple of jsfiddles. -NM

jsfiddle::http://jsfiddle.net/whyisjake/327R3/embedded/result/[width="100%", height="600px"]


.Fluid Column Layout
[source, html]
--------------
<div class="row-fluid">
  <div class="span4">...</div>
  <div class="span8">...</div>
</div>

<div class="row-fluid">
  <div class="span4">...</div>
  <div class="span4 offset2">...</div>
</div>
--------------

Nesting a fluid grid is a little different. Since we are using percentages, each '.row' resets the count. For example, If you were inside a '.span8', instead of two '.span4' elements to divide the content in half, you would use two '.span6' divs. 

.Nesting Fluid Column Layout
[source, html]
--------------
<div class="row-fluid">
  <div class="span8">
		<div class="row">
			<div class="span6">...</div>
			<div class="span6">...</div>
		</div>
  </div>
</div>
--------------

.Nesting Fluid Grid
image::images/nesting-grid.png[]

// This is a little confusing. Some kind of demo or expanded explanation would be cool, but I'm not sure what just yet. -NM

=== Container Layouts

To add a fixed width, centered layout to your page, simply wrap the content in '<div class="container">...</div>'. If you would like to use a fluid layout, but want to wrap everything in a container, use the following: '<div class="container-fluid">...</div>'. Using a fluid layout is great when you are building applications, administration screens and other related projects.

// So the only thing the container adds is centering? Any other benefits worth talking about? (or if you mention any later in the book, you could also just add a cross reference.) If not, I might rename this section "centered layouts", since that's really the essence of the content. -NM

=== Responsive Design

To turn on the responsive features of Bootstrap, you need to add a meta tag to the '<head>' of your webpage. If you haven't downloaded the compiled source, you will also need to add the responsive CSS file.

.Responsive Meta Tag and CSS
[source, html]
--------------
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link href="/css/bootstrap-responsive.css" rel="stylesheet">
--------------

[NOTE]
===============================
*Heads up!* If you get started and are finding that the Bootstrap responsive features aren't working, make sure that you have these tags. The responsive features  aren't added by default at this time because not everything needs to be responsive. Instead of encouraging developers to remove this feature, the authors opted that it was best to enable it as needed.
===============================

==== What is Responsive Design?

Responsive design is a method for taking all of the existing content that is on the page, and optimizing it for the device that is viewing it. For example, the desktop not only gets the normal version of the website, but might get also get a widescreen layout, optimized for the larger displays that many people have attached to their computers. Tablets get an optimized layout, taking advantage of the portrait or landscape layouts of those devices. And then with phones, you can target the much narrower width of phones. To target these different widths, Bootstrap uses CSS media queries to measure the width of the browser viewport, and then using conditionals, change which parts of the stylesheets are loaded. Using the width of the browser viewport, Bootstrap can then optimize the content using a combination of ratios, widths, but mostly falls on 'min-width' and 'max-width'.

At the core, Bootstrap supports five different layouts, each relying on CSS media queries. The largest layout has columns that are 70 pixels wide, contrasting the 60 pixels of the normal layout. The tablet layout brings the columns to 42 pixels wide, and when narrower then that, each column goes fluid, making it the full width of the device.

.Responsive Media Queries
[options="header"]
|=====================================================================
|Label				|Layout width 	 	|Column width 	|Gutter width
|Large display 		|1200px and up 	 	|70px  			|30px
|Default       		|980px and up  	 	|60px			|20px
|Portrait Tablets 	|768px and above 	|42px			|20px
|Phones to Tablets 	|767px and below 2+^|Fluid columns, no fixed widths
|Phones				|480px and below 2+^|Fluid columns, no fixed widths
|=====================================================================

To add custom CSS based on the media query, you can either include all rules in one CSS file, via the media queries below, or use entirely different CSS files.

.CSS media queries in the stylesheet
[source, css]
--------------
/* Large desktop */
@media (min-width: 1200px) { ... }
 
/* Portrait tablet to landscape and desktop */
@media (min-width: 768px) and (max-width: 979px) { ... }
 
/* Landscape phone to portrait tablet */
@media (max-width: 767px) { ... }
 
/* Landscape phones and down */
@media (max-width: 480px) { ... }
--------------

For a larger site, you might want to separate them into separate files. In the HTML file, you can call them with the link tag in the head of your document. This is useful for keeping file sizes smaller, but does potentially increase the HTTP requests if being responsive.

.CSS media queries via the link tag
[source, html]
--------------
<link rel="stylesheet" href="base.css" />
<link rel="stylesheet" media="(min-width:1200px)" href="large.css" />
<link rel="stylesheet" media="(min-width:768px) and (max-width: 979px)" href="tablet.css" />
<link rel="stylesheet" media="(max-width: 767px)" href="tablet.css" />
<link rel="stylesheet" media="(max-width: 480px)" href="phone.css" />
--------------


===== Helper Classes

Bootstrap also includes a handful of helper classes for doing responsive development. It would be best practice to use these sparingly. A couple of use cases that I have seen involve loading custom elements based on certain layouts. Perhaps you have a really nice header on the main layout, but on mobile you want to pare it down, leaving only a few of the elements. In this scenario, you could use the `.hidden-phone` class to hide either parts, or entire dom elements from the the header.

.Media Queries Helper Classes
[options="header"]
|===========================================
|Class			 |Phones  |Tablets |Desktops
|.visible-phone	 |Visible |Hidden  |Hidden
|.visible-tablet |Hidden  |Visible |Hidden
|.visible-desktop|Hidden  |Hidden  |Visible
|.hidden-phone	 |Hidden  |Visible |Visible
|.hidden-tablet	 |Visible |Hidden  |Visible
|.hidden-desktop |Visible |Visible |Hidden
|===========================================	

Regarding mobile development, there are two major ways that you could look at doing development. The mantra that a lot of people are shouting now, is that you should start with mobile, build to that platform, and let the desktop follow. With Bootstrap, you it almost forces the opposite, where you would create a full featured desktop site that "just works".

If you are looking for a strictly mobile framework, Bootrap is still a great resource.